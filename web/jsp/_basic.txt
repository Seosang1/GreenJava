CGI(Common Gateway Interface)
 - 응용 프로그램과 웹 서버 사이의 정보를 주고받는 방식이나 규약들을 정해 놓은 것
 - 단순한 HTML 만으로는 동적인 웹 페이지 구성이 어렵기 때문에 서버측에서 동적인 데이터를 처리해 클라이언트에 HTML문서로 전송해 줄 수 있는 응용 프로그램(웹 프로그램)의 필요성으로 나타남
 - 초창기에는 C나 Perl 같은 언어로 작업하였으나 DB연결이 불편하고 익히기가 쉽지 않나 좀 더 쉽고 강력한 기능을 갖춘 ASP, PHP, JSP 등이 나오게 됨(후에 ASP.Net 추가)


JSP
 - 초창기에는 서블릿(Servlet)이라는 기술로 웹 작업을 하였으나, 자바가 기반이므로 철저히 객체지향적이며 플랫폼 독립적인 자바의 장점을 그대로 웹에서 구현할 수 있으며 스레드 기반의 요청 처리 방식을 사용했기에 사용자가 많을 수록 효율적으로 동작할 수 있었음
 - 단, 서블릿만으로 웹 작업을 하기에는 우선 자바에 대한 많은 지식이 필요했으며 화면 인터페이스 구현에 너무 많은 코드가 필요해 비효율적이고 익히기 어려운 언어로 인식됨
 - 그래서 인터페이스 구현이 쉬운 ASP의 장점을 수용하여 JSP라는 보다 효과적인 기술을 개발함
 - JSP는 인터페이스 구현이 쉽고, 서블리과 함께 구동할 수 있어 서블릿의 기능을 그대로 사용할 수 있음
	자바빈즈(JavaBeans) 같은 기술로 보다 강력한 객체지향적 지원이 가능하게 됨


웹프로그래밍
 - 웹서버에서 동작하는 프로그래밍으로 사용자에게 원하는 페이지를 생성하여 응답해주는 기능
	페이지 : 사용자에게 보여줄 HTML문서를 의미(CSS, JS, 이미지, 동영상 등 포함)
 - 웹프로그래밍 언어
	컴파일 언어 : JSP, ASP.Net
	인터프리터 언어 : PHP, ASP


자바 웹프로그래밍의 특징
1. 간편한 MVC 패턴 적용
 - 모델2라고도 불리우는 MVC(Model View Controller)패턴을 사용하여 사용자에게 보여지는 화면인 View 부분과 실제 비즈니스 로직이 들어가는 Model 부분, 그리고 View와 Model 을 연결시켜주는 Controller 부분으로 나누어 개발된다.
 - MVC패턴을 JSP(View)와 자바빈즈(Model), 그리고 서블릿(Controller)을 이용하여 구현한다.

2. 서블릿(Servlet : Server Side Applet을 서버쪽 자바 응용 프로그램)
 - 웹서버측에서 사용자의 요구에 따라 자동으로 생성된 HTML형식의 페이지를 생산해 전송해 줄 수 있는 여러 기술들 중 자바 진영의 기술을 서블릿(Servlet)이라고 함
 - 단순하게 생각하면 웹 서버상에서 실행되는 자바의 클래스 파일이라 할 수 있음
 - 서블릿은 반드시 javax.servlet.Servlet 인터페이스를 구현(implements) 해서 작성해야 하며 입력과 출력을 HTTP 프로토콜의 요청(Request)과 응답(Response)의 형태로 작업함
 - 작업시 .java 파일로 저장되며, 컴파일 후 실행됨
 - 단, 디자인 관련 작업에서 html 등의 작업시간이 너무 많이 걸린다는 단점이 존재하며 그 단점을 보완하고자 JSP가 나옴

3. JSP(Java Server Page)
 - 화면에 보져주는 부분에 대해 쉽게 작업할 수 있도록 만들어진 기능
 - 서블릿과 다르게 확장자가 jsp로 이루어져 있고, 중간 중간에 html, css, js 등의 코드를 삽입할 수 있음(asp, php와 동일한 방식)
 - 일반적으로 디자인 관련 작업에서 많이 사용됨
 - 단, jsp로 작업한 파일은 다시 서블릿으로 변환되어 컴파일 후 실행됨
 - jsp로 작업한 파일은 'D:\zoom\jsp\work\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\basic\org\apache\jsp'의 위치에 .java파일로 저장되어 있음

기본적으로 서블릿과 JSP 모두 단독으로 사이트를 제작할 수도 있으나 효율적인 작업을 위해 두 기능을 섞어서 사용하는 것이 좋음


클라이언트가 데이터를 서버로 전송하는 방식
1. get : url의 뒤에 '?'를 붙인 후 원하는 이름으로 지정하여 값을 보내는 방식
 - 예) 도메인.com/test.jsp?변수명1=값1&변수명2=값2& ... & 변수명n=값n
 - 브라우저의 주소창에서 직업 url을 입력하거나 a태그 등의 링크로 이동할 경우도 get방식으로 취급함(쿼리스트링이 없어도)
 - 장점 : 사용이 간편하고, 속도가 비교적 빠름
 - 단점 : 보안에 취약하며, 많은 양의 데이터를 보낼 수 없고, 파일 등의 이진 데이터를 보낼 수도 없음
2. post : 폼태그의 method속성을 post로 지정하여 폼안의 컨트롤들의 값을 서버로 보내는 방식
 - 장점 : 보안에 강하며, 많은 양의 데이터나 파일 등의 이진 데이터도 보낼 수 있음
 - 단점 : 반드시 폼을 이용해야 하며, 속도가 느림


서버로 전송된 데이터를 받는 방법
1. 클라이언트가 보낸 데이터는 무조건 String으로 받아짐
  - 보내는 데이터에 한글이 있을 경우 글자가 깨지므로 반드시 받기 전에 캐릭터 인코딩을 유니코드로 지정해야함
	request.setCharacterEncoding("utf-8");	// 유니코드를 받아오는 데이터의 캐릭터 인코딩 지정
	데이터를 받는 모든 파일에 가장 위에서 지정해야 함

- 기본자료형으로 변환하여 사용하기도 함(Wrapper클래스들의 valueOf()메소드를 이용)
 - 예) Integer.valueOf(int형으로 변환할 데이터) : valueOf()는 static메소드임
 - 다만 예전 방식인 Integer.parseInt(int형으로 변환할 데이터) 를 더 많이 사용함
 - 서블릿에서는 get방식으로 보낸 데이터는 doGet()메소드에서, post방식으로 보낸 데이터는 doPost()메소드에서 받아야 함
	단, JSP에서는 방식의 구분없이 받아서 사용함

 - 존재하지 않는 컨트롤의 값을 받으려고 하면 null이 들어감

2. 받는 방식
 - 한 이름으로 하나의 데이터를 보냈을 때 받는 방식
String 변수명 = request.getParameter("컨트롤명");

 - 한 이름으로 여러 개의 데이터를 보냈을 때 받는 방식
String[] 배열명 = request.getParameterValues("컨트롤명");
	여러 개의 컨트롤들을 동일한 이름으로 지정할 경우 받을 때 하나의 배열로 받을 수 있음



자주 발생하는 오류 형태
1. 오류가 발생하지 않고 다운로드 되는 경우
 - 브라우저가 실행할 수 없는 형태의 파일이나 파일형식으로 실행되었을 경우 발생
 - 처리법 : 확장자나 파일 형식을 지정하는 곳에 오타를 검사

2. 404 에러
 - 요청한 페이지가 존재하지 않을 경우 발생
 - 처리법 : url과 실제 존재하는 파일의 경로와 이름을 확인

3. 내장 객체
 - JSP에서 import 없이도 사용할 수 있는 객체(클래스)들로 서블릿에서는 직접 생성하거나 매개변수로 받아와야 함
 - 서블릿에서는 사용하려면 직접 import하고 인스턴스를 생성해야 하지만, JSP에서는 자동으로 미리 인스턴스가 생성되어 있음

1) request 객체
 - javax.servlet.http.HttpServletRequest 클래스의 인스턴스
 - 사용자의 요청정보를 담고 있는 객체
 - 주요 메소드
리턴 타입		메소드명 및 설명
String		getParameter(String name)
 : name의 이름으로 지정된 매개변수의 값을 문자열로 리턴하는 메소드로 해당 매개변수가 없으면 null을 리턴
 : 매개변수 : 쿼리스트링의 변수나 폼안의 컨트롤들을 의미
String[]	getParameterValues(String name)
 : name의 이름으로 지정된 매개변수의 값들을 문자열 배열로 리턴하는 메소드로 같은 이름의 매개변수가 여럿 있을 경우 사용하는 메소드
 : 같은 이름의 컨트롤이 여럿 있을경우에도 해당되며, 이 때 같은 이름의 컨트롤들이 반드시 같은 종류일 필요는 없음
