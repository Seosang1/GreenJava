package dao;

import static db.JdbcUtil.*;
import java.sql.*;
import vo.*;

public class LoginDao {
// 로그인 관련 쿼리를 생성하여 실행시키는 클래스
	private static LoginDao loginDao;
	// 인스턴스 멤버가 아닌 클래스 멤버로 loginDao 인스턴스를 선언함으로써 여러 개가 아닌 하나만 존재하게 됨
	private Connection conn;	
	// 클래스 전체에서 Connection 인스턴스 conn을 사용할 수 있게됨
	private LoginDao() {}
	// 외부에서 직접적으로 인스턴스를 생성하는 것을 막기위해 private으로 기본생성자를 선언
	
	public static LoginDao getInstance() {
	// 인스턴스를 생성해주는 메소드로 하나의 인스턴스만 생성시킴(singleton 방식)
	// DB작업을 많이 하는 클래스 특성상 여러 개의 인스턴스가 생성되면 그만큼 많은 수의 DB연결(Connection)이 생기므로
	// 전체적인 속도 저하의 우려가 있어 싱글톤 방식을 사용
		if (loginDao == null) {
		// 멤버로 선언된 LoginDao형 인스턴스 loginDao가 null이면(인스턴스가 생성되지 않았으면)
			loginDao = new LoginDao();
			// 생성된 loginDao 인스턴스가 없으므로 새롭게 하나 생성함
		}
		return loginDao;
	}
	public void setConnection(Connection conn) {
	// LoginSvc 클래스에서 보낸 Connection 객체를 받아 멤버인 conn에 저장
	// 외부에서 Connection 객체를 받는 이유는 DB작업이 여러번일 경우 Connection 객체를 여러 번 생성하느 것을 방지
		this.conn = conn;
	}
	public MemberInfo getLoginMember(String uid, String pwd) {
		MemberInfo loginMember = null;
		Statement stmt = null;
		ResultSet rs = null;
		try {
			stmt = conn.createStatement();
			String sql = "select a.*, b.ma_idx, b.ma_zip, b.ma_addr1, b.ma_addr2 " + 
			"from t_member_info a, t_member_addr b where a.mi_id = b.mi_id and " + 
			"a.mi_id = '" + uid + "' and a.mi_pwd = '" + pwd + "' and " +
			"a.mi_isactive = 'y' and b.ma_basic = 'y'";
			rs = stmt.executeQuery(sql);
			if (rs.next()) {	// 로그인 성공시
				loginMember = new MemberInfo(); // 로그인 성공시에만 생성되는 인스턴스
				// 로그인 실패시에는 loginMember가 비어있는 상태(null)로 리턴하게 함
				
				loginMember.setMi_id(uid);
				loginMember.setMi_pwd(pwd);
				loginMember.setMi_name(rs.getString("mi_name"));
				loginMember.setMi_birth(rs.getString("mi_birth"));
				loginMember.setMi_gender(rs.getString("mi_gender"));
				loginMember.setMi_phone(rs.getString("mi_phone"));
				loginMember.setMi_email(rs.getString("mi_email"));
				loginMember.setMi_issns(rs.getString("mi_issns"));
				loginMember.setMi_ismail(rs.getString("mi_ismail"));
				loginMember.setMi_rebank(rs.getString("mi_rebank"));
				loginMember.setMi_account(rs.getString("mi_account"));
				loginMember.setMi_recommend(rs.getString("mi_recommend"));
				loginMember.setMi_date(rs.getString("mi_date"));
				loginMember.setMi_isactive(rs.getString("mi_isactive"));
				loginMember.setMi_lastlogin(rs.getString("mi_lastlogin"));
				loginMember.setMa_zip(rs.getString("ma_zip"));
				loginMember.setMa_addr1(rs.getString("ma_addr1"));
				loginMember.setMa_addr2(rs.getString("ma_addr2"));
				loginMember.setMi_point(rs.getInt("mi_point"));
				loginMember.setMa_idx(rs.getInt("ma_idx"));
				// MemberInfo 클래스의 인스턴스 loginMember에 회원정보들과 기본주소를 저장
			}

		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			close(rs);
			close(stmt);
		}

		return loginMember;
	}
}
