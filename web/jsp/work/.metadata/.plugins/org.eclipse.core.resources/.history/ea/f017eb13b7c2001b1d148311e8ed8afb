package ctrl;

import java.io.IOException; 
import javax.servlet.*; 
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;
import action.*;
import vo.*;
 
@WebServlet("*.ntc")
// url이 뭐든 마지막 4글자가 '*.ntc'인 url을 받아옴
public class NoticeCtrl extends HttpServlet {
	private static final long serialVersionUID = 1L; 
    public NoticeCtrl() {
        super(); 
    }
    
	protected void doProcess(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	// 사용자의 요청이 get이든 post든 모두 처리하는 메소드
		request.setCharacterEncoding("utf-8");
		String requestUri = request.getRequestURI();
		// URI(도메인과 쿼리스트링을 뺀 주소 문자열) : /mvcSite/brd_list.ntc 
		String contextPath = request.getContextPath();
		// URI에서 파일명 부분을 제외한 문자열 : /mvcSite 
		String command = requestUri.substring(contextPath.length());
		// requestUri에서 contextPath를 뺀 문자열 : /brd_list.ntc 
		
		ActionForward forward = null;
		Action action = null;
		
		// 사용자의 요청에 따라 각기 다른 action을 작업
		switch (command) {
			case "/brd_list.ntc" : // 공지사항 목록 요청
				action = new NoticeListAction();
				break;
			case "/brd_form.ntc" : // 공지사항 폼 요청 
				action = new NoticeListAction();
				break;
			case "/brd_view.ntc" : // 공지사항 보기 요청 
				action = new NoticeListAction();
				break;
			case "/brd_proc.ntc" : // 공지사항 처리 요청 
				action = new NoticeListAction();
				break;
				
		}
		
		try {
			forward = action.execute(request, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if (forward != null) {
			if (forward.isRedirect()) {
				response.sendRedirect(forward.getPath());
			} else {
				RequestDispatcher dispatcher = request.getRequestDispatcher(arg0);
			}
		}
	} 
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doProcess(request, response);
	} 
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doProcess(request, response);
	}

}
