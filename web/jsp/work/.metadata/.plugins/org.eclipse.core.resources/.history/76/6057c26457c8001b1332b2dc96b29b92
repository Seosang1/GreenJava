package dao;

import static db.JdbcUtil.*;
import javax.sql.*;
import java.sql.*;
import java.util.*;
import vo.*;

public class TestBrdDao { 
	private static TestBrdDao testBrdDao; 
	private Connection conn;
	private TestBrdDao() {} 

	public static TestBrdDao getInstance() {
		if (testBrdDao == null)	testBrdDao = new TestBrdDao(); 
		return testBrdDao;
	}
	public void setConnection(Connection conn) { 
		this.conn = conn; 
	}

	public int getArticleCount(String where) { 
		Statement stmt = null; 
		ResultSet rs = null;	 
		int rcnt = 0;	 

		try {
			String sql = "select count(*) from t_board" + where; 
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);
			if (rs.next())	rcnt = rs.getInt(1); 
			
		} catch(Exception e) {
			System.out.println("getArticleCount() 메소드 오류");
			e.printStackTrace();
		} finally {
			close(rs);	close(stmt);
		}

		return rcnt;
	}
	
	public ArrayList<TestInfo> getArticleList(String where, int cpage, int psize) {
		Statement stmt = null;
		ResultSet rs = null;
		ArrayList<TestInfo> articleList = new ArrayList<TestInfo>(); 
		TestInfo testInfo = null; 
		int snum = (cpage - 1) * psize; 

		try {
			String sql = "select * from t_board " + where + 
				" order by bn_idx desc limit " + snum + ", " + psize;
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);
			while (rs.next()) {
			// rs에 보여줄 게시글이 있을 경우
				testInfo = new TestInfo();
				// articleList에 저장할 한 게시글의 정보를 담을 인스턴스 생성

				testInfo.setBn_idx(rs.getInt("bn_idx"));
				testInfo.setBn_title(rs.getString("bn_title"));
				testInfo.setBn_content(rs.getString("bn_content"));
				testInfo.setBn_read(rs.getInt("bn_read")); 
				testInfo.setBn_date(rs.getString("bn_date"));
				testInfo.setAi_idx(rs.getInt("ai_idx"));
				// 받아온 레코드들로 게시글 정보를 저장
				
				articleList.add(testInfo);
				// 한 게시글의 정보를 담은 testInfo 인스턴스를 articleList에 저장
			}
		} catch(Exception e) {
			System.out.println("getArticleList() 메소드 오류");
			e.printStackTrace();
		} finally {
			close(rs);	close(stmt);
		}

		return articleList;
	}

	public int readCountUp(int idx) {
	// 특정 게시글의 조회수를 증가시키는 메소드
		Statement stmt = null;
		int result = 0;
		
		try {
			String sql = "update t_board set bn_read = bn_read + 1 " +
				" where bn_idx = " + idx;
			stmt = conn.createStatement();
			result = stmt.executeUpdate(sql);
		} catch(Exception e) {
			System.out.println("readCountUp() 메소드 오류");
			e.printStackTrace();
		} finally {
			close(stmt);
		}
		
		return result;
	}

	public TestInfo getArticle(int idx) {
	// 사용자가 선택한 게시글의 정보를 testInfo 형 인스턴스로 리턴하는 메소드
		Statement stmt = null;
		ResultSet rs = null;
		TestInfo testInfo = null;
		// 하나의 게시글 정보를 저장하여 리턴할 testInfo 형 인스턴스를 선언

		try {
			String sql = "select * from t_board where bn_idx = " + idx;
			stmt = conn.createStatement();
			rs = stmt.executeQuery(sql);
			if (rs.next()) { 
				testInfo = new TestInfo();

				testInfo.setBn_idx(idx);
				testInfo.setBn_writer(rs.getString("bn_writer"));
				testInfo.setBn_title(rs.getString("bn_title"));
				testInfo.setBn_content(rs.getString("bn_content"));
				testInfo.setBn_read(rs.getInt("bn_read")); 
				testInfo.setBn_date(rs.getString("bn_date")); 
				// 받아온 레코드로 게시글 정보를 저장
			}
		} catch(Exception e) {
			System.out.println("getArticle() 메소드 오류");
			e.printStackTrace();
		} finally {
			close(rs);	close(stmt);
		}

		return article;
	}
}
