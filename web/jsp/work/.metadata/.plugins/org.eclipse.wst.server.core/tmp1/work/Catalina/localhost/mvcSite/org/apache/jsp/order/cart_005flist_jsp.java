/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.65
 * Generated at: 2021-06-24 01:13:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.order;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import vo.*;
import vo.*;

public final class cart_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/order/../_inc/incHead.jsp", Long.valueOf(1623899498000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("vo");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

request.setCharacterEncoding("utf-8");

MemberInfo loginMember = (MemberInfo)session.getAttribute("loginMember");
boolean isLogin = false;
if (loginMember != null)	isLogin = true;

      out.write("\r\n");
      out.write("<a href=\"/mvcSite/\">인덱스</a>\r\n");
      out.write('\r');
      out.write('\n');

if (!isLogin) {
	out.println("<script>");
	out.println("alert('잘못된 경로로 들어오셨습니다.');");
	out.println("history.back();");
	out.println("</script>");
	out.close();
}

ArrayList<CartInfo> cartList = (ArrayList<CartInfo>)request.getAttribute("cartList");

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("#cartTable th { border-bottom:3px black double; }\r\n");
      out.write("#cartTable td { border-bottom:1px black solid; }\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"jquery-3.6.0.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("function changeOpt(idx, opt, piid) {\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\ttype : \"POST\", \r\n");
      out.write("\t\turl : \"/mvcSite/cart_up_proc.ord\", \r\n");
      out.write("\t\tdata : {\"kind\" : \"opt\", \"op\" : opt, \"idx\" : idx, \"piid\" : piid}, \r\n");
      out.write("\t\tsuccess : function(chkRst) {\r\n");
      out.write("\t\t\tif (chkRst == 0) {\t// 옵션 변경에 실패했을 경우\r\n");
      out.write("\t\t\t\talert(\"상품 옵션 변경에 실패했습니다.\\n다시 시도해 주십시오.\");\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tlocation.reload();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function changeCnt(op, idx, cnt, max) {\t// 장바구니의 수량을 변경시키는 함수\r\n");
      out.write("\tif (op == \"+\" && (cnt + 1) > max) {\r\n");
      out.write("\t\talert(\"재고량(\" + max + \")보다 많이 주문할 수 없습니다.\");\treturn;\r\n");
      out.write("\t} else if (op == '-' && (cnt - 1) < 1) {\r\n");
      out.write("\t\talert(\"최소 1개는 주문해야 합니다.\");\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\ttype : \"POST\", \r\n");
      out.write("\t\turl : \"/mvcSite/cart_up_proc.ord\", \r\n");
      out.write("\t\tdata : {\"kind\" : \"cnt\", \"op\" : op, \"idx\" : idx, \"piid\" : \"\"}, \r\n");
      out.write("\t\tsuccess : function(chkRst) {\r\n");
      out.write("\t\t\tif (chkRst == 0) {\t// 수량 변경에 실패했을 경우\r\n");
      out.write("\t\t\t\talert(\"상품 수량 변경에 실패했습니다.\\n다시 시도해 주십시오.\");\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tlocation.reload();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function clearCart(kind) {\r\n");
      out.write("\tvar msg = \"지정한 상품을 \";\tvar idx = kind;\r\n");
      out.write("\tif (kind == -1) {\r\n");
      out.write("\t\tmsg = \"선택한 상품들을 모두 \";\r\n");
      out.write("\t\tidx = getSelectedChk();\t// 선택된 체크박스의 value들을 받아 옴\r\n");
      out.write("\t\tif (idx == \"\") {\r\n");
      out.write("\t\t\talert(\"삭제할 상품을 선택해야 합니다.\");\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t} else if (kind == 0)\tmsg = \"장바구니안의 모든 상품을 \";\r\n");
      out.write("\r\n");
      out.write("\tif (confirm(msg + \"삭제하시겠습니까?\")) {\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\ttype : \"POST\", \r\n");
      out.write("\t\t\turl : \"/mvcSite/cart_del_proc.ord\", \r\n");
      out.write("\t\t\tdata : {\"kind\" : kind, \"idx\" : idx}, \r\n");
      out.write("\t\t\tsuccess : function(chkRst) {\r\n");
      out.write("\t\t\t\tif (chkRst == 0) {\t// 삭제에 실패했을 경우\r\n");
      out.write("\t\t\t\t\talert(\"상품 삭제에 실패했습니다.\\n다시 시도해 주십시오.\");\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tlocation.reload();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function getSelectedChk() {\t// 선택한 체크박스들의 value값을 리턴하는 함수\r\n");
      out.write("\tvar idx = \"\";\t// 선택한 체크박스들의 value값을 쉼표로 구분하여 저장하는 변수\r\n");
      out.write("\tvar arrChk = document.frmCart.chk;\r\n");
      out.write("\tfor (var i = 0 ; i < arrChk.length ; i++) {\r\n");
      out.write("\t\tif (arrChk[i].checked)\tidx += \",\" + arrChk[i].value;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (idx != \"\")\tidx = idx.substring(1);\r\n");
      out.write("\r\n");
      out.write("\treturn idx;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function chkAll(all) {\r\n");
      out.write("\tvar arrChk = document.frmCart.chk;\r\n");
      out.write("\tfor (var i = 0 ; i < arrChk.length ; i++) {\r\n");
      out.write("\t\tarrChk[i].checked = all.checked;\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function choose(chk) {\r\n");
      out.write("\tif (!chk.checked) {\t// 현재 체크박스를 체크 해제했을 경우\r\n");
      out.write("\t\tdocument.frmCart.all.checked = false;\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function goOrder(kind) {\r\n");
      out.write("\tif (kind == \"a\") {\t// 전체 상품 구매하기일 경우\r\n");
      out.write("\t\tvar arrChk = document.frmCart.chk;\r\n");
      out.write("\t\tfor (var i = 0 ; i < arrChk.length ; i++)\tarrChk[i].checked = true;\r\n");
      out.write("\t\t// 모든 체크박스를 체크된 상태로 변경\r\n");
      out.write("\t}\r\n");
      out.write("\tdocument.frmCart.submit();\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2>장바구니 화면</h2>\r\n");
      out.write("<form name=\"frmCart\" action=\"order_form.ord\" method=\"post\">\r\n");
      out.write("<input type=\"hidden\" name=\"kind\" value=\"cart\" />\r\n");
      out.write("<table width=\"800\" cellpadding=\"5\" cellspacing=\"0\" id=\"cartTable\">\r\n");
      out.write("<tr>\r\n");
      out.write("<th width=\"5%\"><input type=\"checkbox\" name=\"all\" checked=\"checked\" onclick=\"chkAll(this);\" /></th>\r\n");
      out.write("<th width=\"*\">상 품</th><th width=\"10%\">옵션</th><th width=\"15%\">수량</th>\r\n");
      out.write("<th width=\"10%\">단가</th><th width=\"10%\">가격</th><th width=\"10%\">삭제</th>\r\n");
      out.write("</tr>\r\n");

if (cartList != null && cartList.size() > 0) {	// 장바구니에 상품이 들어 있으면
	int total = 0;	// 총 구매가격을 누적할 변수
	for (int i = 0 ; i < cartList.size() ; i++) {
		CartInfo cart = cartList.get(i);
		int idx = cart.getOc_idx();	// 카트 인덱스번호
		String lnk = "<a href=\"pdt_view.pdt?id=" + cart.getPi_id() + "\">";
		int max = cart.getPi_stock();
		if (max == -1)	max = 1000;

      out.write("\r\n");
      out.write("<tr align=\"center\">\r\n");
      out.write("<td><input type=\"checkbox\" name=\"chk\" value=\"");
      out.print(idx);
      out.write("\" checked=\"checked\" onclick=\"choose(this);\" /></td>\r\n");
      out.write("<td align=\"left\">\r\n");
      out.write("\t");
      out.print(lnk);
      out.write("<img src=\"product/pdt_img/");
      out.print(cart.getPi_img1());
      out.write("\" width=\"50\" height=\"60\" align=\"absmiddle\" /></a>\r\n");
      out.write("\t&nbsp;&nbsp;&nbsp;");
      out.print(cart.getB_name() );
      out.write(' ');
      out.write('-');
      out.write(' ');
      out.print(lnk + cart.getPi_name() );
      out.write("</a>\r\n");
      out.write("</td>\r\n");
      out.write("<td>\r\n");
      out.write("\t<select name=\"opt\" onchange=\"changeOpt(");
      out.print(idx);
      out.write(", this.value, '");
      out.print(cart.getPi_id());
      out.write("');\">\r\n");

		String[] arrOpt = cart.getPi_option().split(";");
		for (int j = 0 ; j < arrOpt.length ; j++) {
			String slt = "";
			if (cart.getOc_option().equals(arrOpt[j]))	slt = " selected='selected'";
			out.println("<option value='" + arrOpt[j] + "'" + slt + ">" + arrOpt[j] + "</option>");
		}

      out.write("\r\n");
      out.write("\t</select>\r\n");
      out.write("</td>\r\n");
      out.write("<td>\r\n");
      out.write("\t<input type=\"button\" value=\"-\" \r\n");
      out.write("\t\tonclick=\"changeCnt(this.value, ");
      out.print(idx);
      out.write(',');
      out.write(' ');
      out.print(cart.getOc_cnt());
      out.write(", 0);\" />\r\n");
      out.write("\t<span id=\"cnt");
      out.print(idx);
      out.write('"');
      out.write('>');
      out.print(cart.getOc_cnt());
      out.write("</span>\r\n");
      out.write("\t<input type=\"button\" value=\"+\" \r\n");
      out.write("\t\tonclick=\"changeCnt(this.value, ");
      out.print(idx);
      out.write(',');
      out.write(' ');
      out.print(cart.getOc_cnt());
      out.write(',');
      out.write(' ');
      out.print(max);
      out.write(");\" />\r\n");
      out.write("</td>\r\n");
      out.write("<td>");
      out.print(cart.getPi_price());
      out.write("</td>\r\n");
      out.write("<td>");
      out.print(cart.getPi_price() * cart.getOc_cnt());
      out.write("</td>\r\n");
      out.write("<td><input type=\"button\" value=\"삭제\" onclick=\"clearCart(");
      out.print(idx);
      out.write(");\" />\r\n");
      out.write("</tr>\r\n");

		total += cart.getPi_price() * cart.getOc_cnt();
		// 장바구니 내의 상품 총 가격
	}

      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("<p style=\"width:800px; text-align:right\">총 결제 금액 : ");
      out.print(total);
      out.write("&nbsp;&nbsp;</p>\r\n");
      out.write("<p style=\"width:800px; text-align:right\">\r\n");
      out.write("\t<input type=\"button\" value=\"장바구니 비우기\" onclick=\"clearCart(0);\" />&nbsp;&nbsp;\r\n");
      out.write("\t<input type=\"button\" value=\"선택한 상품 삭제\" onclick=\"clearCart(-1);\" />&nbsp;&nbsp;\r\n");
      out.write("\t<input type=\"button\" value=\"선택한 상품 구매\" onclick=\"goOrder('s');\" />&nbsp;&nbsp;\r\n");
      out.write("\t<input type=\"button\" value=\"전체 상품 구매\" onclick=\"goOrder('a');\" />&nbsp;&nbsp;\r\n");
      out.write("</p>\r\n");

} else {	// 장바구니가 비었으면
	out.println("<p style='width:800px; text-align:right'>장바구니가 비었습니다.</p>");
}

      out.write("\r\n");
      out.write("<p style=\"width:800px; text-align:center; \">\r\n");
      out.write("\t<input type=\"button\" value=\"계속 쇼핑\" onclick=\"location.href='pdt_list.pdt';\" />\r\n");
      out.write("</p>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
