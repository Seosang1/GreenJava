/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.65
 * Generated at: 2021-06-24 03:50:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import vo.*;
import vo.*;

public final class pdt_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/product/../_inc/incHead.jsp", Long.valueOf(1623899498000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("vo");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

request.setCharacterEncoding("utf-8");

MemberInfo loginMember = (MemberInfo)session.getAttribute("loginMember");
boolean isLogin = false;
if (loginMember != null)	isLogin = true;

      out.write("\r\n");
      out.write("<a href=\"/mvcSite/\">인덱스</a>\r\n");
      out.write('\r');
      out.write('\n');

request.setCharacterEncoding("utf-8");

ArrayList<ProductInfo> pdtList = (ArrayList<ProductInfo>)request.getAttribute("pdtList");
ArrayList<CataBigInfo> cataBigList = 
	(ArrayList<CataBigInfo>)request.getAttribute("cataBigList");	// 대분류 목록
ArrayList<CataSmallInfo> cataSmallList = 
	(ArrayList<CataSmallInfo>)request.getAttribute("cataSmallList");// 소분류 목록
ArrayList<BrandInfo> brandList = 
	(ArrayList<BrandInfo>)request.getAttribute("brandList");		// 브랜드 목록
PdtPageInfo pageInfo = (PdtPageInfo)request.getAttribute("pageInfo");

String args = "", schargs = "";
// 검색관련 쿼리스트링 제작
if (pageInfo.getKeyword() == null)	schargs += "&keyword=";
else		schargs += "&keyword=" + pageInfo.getKeyword();

if (pageInfo.getBcata() == null)	schargs += "&bcata=";
else		schargs += "&bcata=" + pageInfo.getBcata();

if (pageInfo.getScata() == null)	schargs += "&scata=";
else		schargs += "&scata=" + pageInfo.getScata();

if (pageInfo.getBrand() == null)	schargs += "&brand=";
else		schargs += "&brand=" + pageInfo.getBrand();

if (pageInfo.getSprice() == null)	schargs += "&sprice=";
else		schargs += "&sprice=" + pageInfo.getSprice();

if (pageInfo.getEprice() == null)	schargs += "&eprice=";
else		schargs += "&eprice=" + pageInfo.getEprice();
args = "?cpage=" + pageInfo.getCpage() + schargs;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script>\r\n");

String cbid = "", arrName = "";
int j = 0;
for (int i = 0 ; i < cataSmallList.size() ; i++) {
	if (!cbid.equals(cataSmallList.get(i).getCb_id())) {
		cbid = cataSmallList.get(i).getCb_id();
		arrName = "arr" + cbid;
		out.println("var " + arrName + " = new Array();");
		out.println(arrName + "[0] = new Option(\"\", \"소분류 전체\");");
		j = 1;
	}
	out.println(arrName + "[" + j + "] = new Option(\"" + 
	cataSmallList.get(i).getCs_id() + "\", \"" + cataSmallList.get(i).getCs_name() + "\");");
	j++;
}

      out.write("\r\n");
      out.write("function setCategory(x, target) {\r\n");
      out.write("// x : 선택한 대분류 ID, target : 선택한 대분류에 속한 소분류를 보여줄 컨트롤 객체\r\n");
      out.write("\tfor (var i = target.options.length - 1 ; i > 0 ; i--) {\r\n");
      out.write("\t\ttarget.options[i] = null;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif (x != \"\") {\r\n");
      out.write("\t\tvar arr = eval(\"arr\" + x);\r\n");
      out.write("\t\tfor (var i = 0 ; i < arr.length ; i++) {\r\n");
      out.write("\t\t\ttarget.options[i] = new Option(arr[i].value, arr[i].text);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\ttarget.options[0].selected = true;\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2>상품 목록</h2>\r\n");
      out.write("<form name=\"frmSch\" method=\"get\">\r\n");
      out.write("<input type=\"hidden\" name=\"ord\" value=\"");
      out.print(pageInfo.getOrd() );
      out.write("\" />\r\n");
      out.write("<input type=\"hidden\" name=\"psize\" value=\"");
      out.print(pageInfo.getPsize() );
      out.write("\" />\r\n");
      out.write("<table width=\"800\" cellpadding=\"5\">\r\n");
      out.write("<tr>\r\n");
      out.write("<th width=\"10%\">분류</th>\r\n");
      out.write("<td width=\"40%\">\r\n");
      out.write("\t<select name=\"bcata\" onchange=\"setCategory(this.value, this.form.scata);\">\r\n");
      out.write("\t\t<option value=\"\">대분류 전체</option>\r\n");

for (CataBigInfo cata : cataBigList) {
	String slt = "";
	if (pageInfo.getBcata() != null && pageInfo.getBcata().equals(cata.getCb_id()))
		slt = " selected='selected'";

      out.write("\r\n");
      out.write("\t\t<option value=\"");
      out.print(cata.getCb_id() );
      out.write('"');
      out.print(slt );
      out.write('>');
      out.print(cata.getCb_name() );
      out.write("</option>\r\n");
 } 
      out.write("\r\n");
      out.write("\t</select>&nbsp;&nbsp;&nbsp;\r\n");
      out.write("\t<select name=\"scata\">\r\n");
      out.write("\t\t<option value=\"\">소분류 전체</option>\r\n");

if (pageInfo.getBcata() != null && !pageInfo.getBcata().equals("")) {
// 대분류 검색조건이 있을 경우
	for (CataSmallInfo cata : cataSmallList) {
		if (pageInfo.getBcata().equals(cata.getCb_id())) {
		// 검색조건의 대분류와 동일한 대분류를 가진 소분류일 경우
			String slt = "";
			if (pageInfo.getScata() != null && pageInfo.getScata().equals(cata.getCs_id()))
				slt = " selected='selected'";

      out.write("\r\n");
      out.write("\t\t<option value=\"");
      out.print(cata.getCs_id());
      out.write('"');
      out.print(slt);
      out.write('>');
      out.print(cata.getCs_name());
      out.write("</option>\r\n");

		}
	}
}

      out.write("\r\n");
      out.write("\t</select>\r\n");
      out.write("</td>\r\n");
      out.write("<th width=\"10%\">브랜드</th>\r\n");
      out.write("<td width=\"40%\">\r\n");
      out.write("\t<select name=\"brand\">\r\n");
      out.write("\t\t<option value=\"\">브랜드 전체</option>\r\n");

for (BrandInfo br : brandList) {
	String slt = "";
	if (pageInfo.getBrand() != null && pageInfo.getBrand().equals(br.getB_id()))
		slt = " selected='selected'";

      out.write("\r\n");
      out.write("\t\t<option value=\"");
      out.print(br.getB_id() );
      out.write('"');
      out.write('>');
      out.print(br.getB_name() );
      out.write("</option>\r\n");

}

      out.write("\r\n");
      out.write("\t</select>\r\n");
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("<th>상품명</th>\r\n");
      out.write("<td><input type=\"text\" name=\"keyword\" value=\"");
      out.print(pageInfo.getKeyword() );
      out.write("\" /></td>\r\n");
      out.write("<th>가격대</th>\r\n");
      out.write("<td>\r\n");
      out.write("\t<input type=\"text\" name=\"sprice\" size=\"5\" value=\"");
      out.print(pageInfo.getSprice());
      out.write("\" />원 ~\r\n");
      out.write("\t<input type=\"text\" name=\"eprice\" size=\"5\" value=\"");
      out.print(pageInfo.getEprice());
      out.write("\" />원\r\n");
      out.write("</td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr><td colspan=\"4\" align=\"center\">\r\n");
      out.write("\t<input type=\"submit\" value=\"상품 검색\" />\r\n");
      out.write("\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n");
      out.write("\t<input type=\"reset\" value=\"다시 입력\" />\r\n");
      out.write("</td></tr>\r\n");
      out.write("</table>\r\n");
      out.write("</form>\r\n");
      out.write("<p style=\"width:800px;\" align=\"right\">정렬조건 :\r\n");
      out.write("\t<a href=\"pdt_list.pdt");
      out.print(args);
      out.write("&ord=idd\" style=\"font-weight:");
      out.print((pageInfo.getOrd().equals("idd")) ? "bold" : "normal" );
      out.write("\">신상품순</a>&nbsp;\r\n");
      out.write("\t<a href=\"pdt_list.pdt");
      out.print(args);
      out.write("&ord=salecntd\" style=\"font-weight:");
      out.print((pageInfo.getOrd().equals("salecntd")) ? "bold" : "normal" );
      out.write("\">인기순</a>&nbsp;\r\n");
      out.write("\t<a href=\"pdt_list.pdt");
      out.print(args);
      out.write("&ord=namea\" style=\"font-weight:");
      out.print((pageInfo.getOrd().equals("namea")) ? "bold" : "normal" );
      out.write("\">상품명</a>&nbsp;\r\n");
      out.write("\t<a href=\"pdt_list.pdt");
      out.print(args);
      out.write("&ord=pricea\" style=\"font-weight:");
      out.print((pageInfo.getOrd().equals("pricea")) ? "bold" : "normal" );
      out.write("\">낮은 가격순</a>&nbsp;\r\n");
      out.write("\t<a href=\"pdt_list.pdt");
      out.print(args);
      out.write("&ord=priced\" style=\"font-weight:");
      out.print((pageInfo.getOrd().equals("priced")) ? "bold" : "normal" );
      out.write("\">높은 가격순</a>&nbsp;\r\n");
      out.write("\t<a href=\"pdt_list.pdt");
      out.print(args);
      out.write("&ord=reviewd\" style=\"font-weight:");
      out.print((pageInfo.getOrd().equals("reviewd")) ? "bold" : "normal" );
      out.write("\">리뷰순</a>&nbsp;&nbsp;\r\n");
      out.write("\r\n");
      out.write("\t<a href=\"pdt_list.pdt");
      out.print(args);
      out.write("&ord=");
      out.print(pageInfo.getOrd());
      out.write("&psize=10\">\r\n");
      out.write("\t<img src=\"img/pdt_list_");
      out.print((pageInfo.getPsize() == 10) ? "on" : "off" );
      out.write(".png\" width=\"15\" align=\"absmiddle\" /></a>\r\n");
      out.write("\t<a href=\"pdt_list.pdt");
      out.print(args);
      out.write("&ord=");
      out.print(pageInfo.getOrd());
      out.write("&psize=12\">\r\n");
      out.write("\t<img src=\"img/pdt_img_");
      out.print((pageInfo.getPsize() == 12) ? "on" : "off" );
      out.write(".png\" width=\"15\" align=\"absmiddle\" /></a>&nbsp;&nbsp;\r\n");
      out.write("</p>\r\n");
      out.write("<table width=\"800\" cellpadding=\"5\">\r\n");

if (pdtList != null && pdtList.size() > 0) {
// 상품 검색결과가 있으면
	for (int i = 0 ; i < pdtList.size() ; i++) {
		ProductInfo pi = pdtList.get(i);
		String lnk = null;
		if (pi.getPi_stock() != 0) {
			lnk = "<a href=\"pdt_view.pdt" + args + "&id=" + pi.getPi_id() + 
			"&ord=" + pageInfo.getOrd() + "&psize=" + pageInfo.getPsize() + "\">";
		} else {
			lnk = "<a href=\"javascript:alert('품절 상품입니다.');\">";
		}
		if (pageInfo.getPsize() == 12) {	// 상품목록을 한 줄에 4개씩 보여주기
			if (i % 4 == 0)		out.println("<tr align=\"center\">");

      out.write("\r\n");
      out.write("<td width=\"200\">\r\n");
      out.write("\t");
      out.print(lnk);
      out.write("<img src=\"product/pdt_img/");
      out.print(pi.getPi_img1());
      out.write("\" width=\"180\" height=\"200\" /><br />\r\n");
      out.write("\t");
      out.print(pi.getPi_name());
      out.write("</a><br />");
      out.print(pi.getPi_price());
      out.write(" 원\r\n");
      out.write("</td>\r\n");

			if (i % 4 == 3)		out.println("</tr>");
		} else {	// 상품목록을 한 줄에 하나씩 보여주기

      out.write("\r\n");
      out.write("<tr>\r\n");
      out.write("<td width=\"150\" align=\"center\">");
      out.print(lnk);
      out.write("<img src=\"product/pdt_img/");
      out.print(pi.getPi_img1());
      out.write("\" width=\"110\" height=\"130\" /></a></td>\r\n");
      out.write("<td width=\"*\">");
      out.print(lnk + pi.getPi_name());
      out.write("</a></td>\r\n");
      out.write("<td width=\"100\"><strong>");
      out.print(pi.getPi_price());
      out.write("</strong> 원</td>\r\n");
      out.write("</tr>\r\n");

		}
	}
} else {
	out.println("<tr><th>검색결과가 없습니다.</th></tr>");
}

      out.write("\r\n");
      out.write("</table>\r\n");

if (pdtList != null && pdtList.size() > 0) {
	args = "?ord=" + pageInfo.getOrd() + "&psize=" + pageInfo.getPsize() + schargs;

	out.println("<p style=\"width:800px;\" align=\"center\">");

	if (pageInfo.getCpage() == 1) {	// 현재 페이지 번호가 1이면
		out.println("[&lt;&lt;]&nbsp;&nbsp;[&lt;]&nbsp;&nbsp;");
	} else {
		out.print("<a href='pdt_list.pdt" + args + "&cpage=1" + "'>");
		out.println("[&lt;&lt;]</a>&nbsp;&nbsp;");
		out.print("<a href='pdt_list.pdt" + args + 
			"&cpage=" + (pageInfo.getCpage() - 1) + "'>");
		out.println("[&lt;]</a>&nbsp;&nbsp;");
	} // 첫 페이지와 이전 페이지 링크

	for (int i = 1, k = pageInfo.getSpage() ; i <= pageInfo.getBsize() && k <= pageInfo.getEpage() ; i++, k++) {
	// i : 루프돌릴 횟수를 검사하는 용도의 변수, k : 페이지 번호 출력용 변수
	// 조건 : bsize만큼 루프를 도는데 페이지가 마지막 페이지일 경우 bsize보다 작아도 멈춤
		if (pageInfo.getCpage() == k) {	// 현재 페이지 번호일 경우 링크없이 강조만 함
			out.print("&nbsp;<strong>" + k + "</strong>&nbsp;");
		} else {
			out.print("&nbsp;<a href='pdt_list.pdt" + args + "&cpage=" + k + "'>");
			out.print(k + "</a>&nbsp;");
		}
	}

	if (pageInfo.getCpage() == pageInfo.getPcnt()) {	// 현재 페이지번호가 마지막 페이지 번호이면
		out.println("&nbsp;&nbsp;[&gt;]&nbsp;&nbsp;[&gt;&gt;]");
	} else {
		out.println("&nbsp;&nbsp;<a href='pdt_list.pdt" + args + 
				"&cpage=" + (pageInfo.getCpage() + 1) + "'>[&gt;]</a>");
			out.print("&nbsp;&nbsp;<a href='pdt_list.pdt" + args + 
				"&cpage=" + pageInfo.getPcnt() + "'>");
			out.println("[&gt;&gt;]</a>");
		}

	out.println("</p>");
}

      out.write(" \r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
