/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.65
 * Generated at: 2021-07-01 16:23:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.hotel;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import vo.*;

public final class hotel_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/hotel/../_inc/_footer.jsp", Long.valueOf(1625148662000L));
    _jspx_dependants.put("/hotel/../_inc/_header.jsp", Long.valueOf(1625148662000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("vo");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
 
String incSrc = request.getContextPath() + "/_inc/";

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"><html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\t<title>Document</title>\r\n");
      out.write("\r\n");
      out.write("\t<!-- Bootstrap core CSS -->\r\n");
      out.write("\t<link href=\"");
      out.print(incSrc );
      out.write("/bootstrap.min.css\" rel=\"stylesheet\" >\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("\t<style>\r\n");
      out.write("\t\t/* 헤더 관련 css */\r\n");
      out.write("\tbody {\r\n");
      out.write("\t\tmargin:0; font-size:16px; line-height:1.5; background:rgb(240, 240, 240); \r\n");
      out.write("\t\tcolor:#000; min-width:960px; padding-top:10px;\r\n");
      out.write("\t}\r\n");
      out.write("\th1, h2, h3, p, ul { margin:0; }\r\n");
      out.write("\tul { padding-left:0; }\r\n");
      out.write("\tul li { list-style-type:none; }\r\n");
      out.write("\ta { color:inherit; text-decoration:none; }\r\n");
      out.write("\timg { vertical-align:middle; }\r\n");
      out.write("\t.dummy { margin:0 auto; max-width:70em; padding:5em 0; }\r\n");
      out.write("\r\n");
      out.write("\t.page-header {\r\n");
      out.write("\t\tbackground:#fff; position:absolute; width:100%; min-width:960px; \r\n");
      out.write("\t\t-webkit-box-shadow:0 1px 1px rgba(0, 0, 0, 0.25);\r\n");
      out.write("\t\t\t\tbox-shadow:0 1px 1px rgba(0, 0, 0, 0.25);\r\n");
      out.write("\t}\r\n");
      out.write("\t.page-header.sticky { position:fixed; top:0; z-index: 1; }\r\n");
      out.write("\t.page-header > .inner { margin:auto; width:960px; }\r\n");
      out.write("\t.no-boxshadow .page-header { border-bottom:1px solid rgb(204, 204, 204); }\r\n");
      out.write("\t.site-logo { float:left; margin-left:-75px; margin-top:10px; }\r\n");
      out.write("\r\n");
      out.write("\t.primary-nav { float:right; line-height:65px; letter-spacing:3px; text-transform:uppercase; margin-right:-100px; }\r\n");
      out.write("\t.primary-nav li { float:left; }\r\n");
      out.write("\t.primary-nav a { display:block; padding:0 1.36em; }\r\n");
      out.write("\t.primary-nav a:hover { background:rgb(240, 240, 240); }\r\n");
      out.write("\r\n");
      out.write("\t.page-top { \r\n");
      out.write("\t\tmargin: 0 auto;\r\n");
      out.write("    max-width: 94em;\r\n");
      out.write("\t\ttext-align: right;\r\n");
      out.write("\t\tfont-size: 12px;\r\n");
      out.write("\t\tpadding-bottom: 27px; \r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t.page-top-menu { float:right; line-height:20px; letter-spacing:1px; text-transform:uppercase; }\r\n");
      out.write("\t.page-top-menu li { float:left; }\r\n");
      out.write("\t.page-top-menu a { display:block; padding:0 0.5em; }\r\n");
      out.write("\t.page-top-menu a:hover { background:rgb(240, 240, 240); }\r\n");
      out.write("\r\n");
      out.write("\t/* 안에 컨텐츠? */\r\n");
      out.write("\r\n");
      out.write("\t.bd-placeholder-img {\r\n");
      out.write("        font-size: 1.125rem;\r\n");
      out.write("        text-anchor: middle;\r\n");
      out.write("        -webkit-user-select: none;\r\n");
      out.write("        -moz-user-select: none;\r\n");
      out.write("        user-select: none;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      @media (min-width: 768px) {\r\n");
      out.write("        .bd-placeholder-img-lg {\r\n");
      out.write("          font-size: 3.5rem;\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</style>\r\n");
      out.write("\t<script src=\"");
      out.print(incSrc );
      out.write("jquery-3.6.0.js\"></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\t\t$(\".page-header\").each(function() {\r\n");
      out.write("\t\t\tvar $window = $(window);\t// 브라우저 창을 jQuery객체로 저장\r\n");
      out.write("\t\t\tvar $header = $(this);\t\t// page-header를 jQuery객체로 저장(고정시켜야 할 객체)\r\n");
      out.write("\t\t\tvar headerOffsetTop = $header.offset().top;\r\n");
      out.write("\t\t\t// $header의 상단 지점의 위치(이 값에 따라 고정시킬지 여부가 결정됨)\r\n");
      out.write("\r\n");
      out.write("\t\t\t$window.on(\"scroll\", function() {\r\n");
      out.write("\t\t\t// 브라우저($window)에서 스크롤 이벤트가 발생했을 때 동작됨\r\n");
      out.write("\t\t\t\tif ($window.scrollTop() > headerOffsetTop) {\r\n");
      out.write("\t\t\t\t// 브라우저의 스크롤바 상단 위치($window.scrollTop())가 메뉴바 상단위치(headerOffsetTop)보다 크면\r\n");
      out.write("\t\t\t\t// 메뉴바가 가려질 정도로 스크롤바가 내려왔을 경우\r\n");
      out.write("\t\t\t\t\t$header.addClass(\"sticky\");\r\n");
      out.write("\t\t\t\t\t// $header에 'sticky'라는 클래스를 추가(sticky : css에서 상단에 고정시키는 스타일을 적용한 클래스)\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t$header.removeClass(\"sticky\");\r\n");
      out.write("\t\t\t\t\t// $header에 'sticky'라는 클래스를 제거(sticky : css에서 상단에 고정시키는 스타일을 적용한 클래스)\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t$window.trigger(\"scroll\");\r\n");
      out.write("\t\t\t// trigger() : 선택한 객체에 지정한 이벤트를 인위적으로 발생시키는 메소드\r\n");
      out.write("\t\t\t// 파일 로딩 후 헤더의 초기 위치를 조정하기 위해 실행됨 \r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"page-top\"> \r\n");
      out.write("\t<div class=\"page-top-menu\">\r\n");
      out.write("\t\t<ul>\r\n");
      out.write("\t\t\t<li><a href=\"#\">로그인</a></li>\r\n");
      out.write("\t\t\t<li>|</li>\r\n");
      out.write("\t\t\t<li><a href=\"#\">마이페이지</a></li>\r\n");
      out.write("\t\t\t<li>|</li>\r\n");
      out.write("\t\t\t<li><a href=\"#\">고객센터</a></li>\r\n");
      out.write("\t\t</ul>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"page-header\">\r\n");
      out.write("\t<div class=\"inner\">\r\n");
      out.write("\t\t<h1 class=\"site-logo\"><a href=\"index.jsp\">JEJUJEJU<!--img src=\"images/logo.png\" width=\"200\" height=\"65\" /--></a></h1>\r\n");
      out.write("\t\t<div class=\"primary-nav\">\r\n");
      out.write("\t\t\t<ul>\r\n");
      out.write("\t\t\t\t<li><a href=\"#\">제주정보</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"#\">음식점</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"#\">여행지</a></li>\r\n");
      out.write("\t\t\t\t<li><a href=\"#\">숙박</a></li>\r\n");
      out.write("\t\t\t\t<!--li><a href=\"#\">고객센터</a></li-->\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>");
      out.write('\r');
      out.write('\n');

request.setCharacterEncoding("utf-8");

// ▼▼▼ 데이터 받아와서 변수 셋팅 ▼▼▼ 
ArrayList<HotelInfo> list = (ArrayList<HotelInfo>) request.getAttribute("list");
PageInfo pageInfo = (PageInfo) request.getAttribute("pageInfo");
Common common = new Common();
HashMap<String, String> mapSchargs = (HashMap<String, String>) request.getAttribute("schargs");
String schargs = "";

// ▼▼▼ 검색관련 쿼리스트링 제작 ▼▼▼
String args = "?cpage=" + pageInfo.getCpage();
for (String key : mapSchargs.keySet()) {
	schargs += "&" + key + "=" + mapSchargs.get(key);
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 내용 -->\r\n");
      out.write("<div class=\"dummy\">\r\n");
      out.write("\r\n");
      out.write("\t<!-- 조회 -->\r\n");
      out.write("\t<div class=\"card\">\r\n");
      out.write("\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t<form class=\"row g-3\" id=\"frm\" name=\"frm\" method=\"get\"\r\n");
      out.write("\t\t\t\taction=\"hotel_list.hotel\">\r\n");
      out.write("\t\t\t\t<div class=\"col-md-2\">\r\n");
      out.write("\t\t\t\t\t<label for=\"sl_area\" class=\"form-label\">지역</label> \r\n");
      out.write("\t\t\t\t\t<select class=\"form-select\" name=\"sl_area\"\r\n");
      out.write("\t\t\t\t\t\taria-label=\"원하시는 지역을 선택해주세요\">\r\n");
      out.write("\t\t\t\t\t\t<option value=\"\" selected>전체</option>\r\n");
      out.write("\t\t\t\t\t");
 for(String key : common.getArea().keySet()) { 
						String sl = "";
						if (key.equals(mapSchargs.get("area"))) sl = " selected = 'selected' ";
					
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<option value=\"");
      out.print(key);
      out.write('"');
      out.write(' ');
      out.print(sl );
      out.write('>');
      out.print(common.getArea().get(key) );
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t\t</select>  \r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-md-2\">\r\n");
      out.write("\t\t\t\t\t<label for=\"sl_type\" class=\"form-label\">유형</label> <select\r\n");
      out.write("\t\t\t\t\t\tclass=\"form-select\" name=\"sl_type\" aria-label=\"원하시는 유형을 선택해주세요\">\r\n");
      out.write("\t\t\t\t\t\t<option value=\"\" selected>전체</option>\r\n");
      out.write("\t\t\t\t\t");
 for(String key : common.getHotelType().keySet()) {
						String sl = "";
						if (key.equals(mapSchargs.get("type"))) sl = " selected = 'selected' "; 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<option value=\"");
      out.print(key);
      out.write('"');
      out.write(' ');
      out.print(sl );
      out.write('>');
      out.print(common.getHotelType().get(key) );
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t\t</select> \r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-md-2\">\r\n");
      out.write("\t\t\t\t\t<label for=\"txt_sdate\" class=\"form-label\">시작일</label> <input\r\n");
      out.write("\t\t\t\t\t\ttype=\"text\" class=\"form-control\" id=\"txt_sdate\" name=\"txt_sdate\" value=\"");
      out.print(common.nullToString(mapSchargs.get("sdate")) );
      out.write("\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-md-2\">\r\n");
      out.write("\t\t\t\t\t<label for=\"txt_edate\" class=\"form-label\">종료일</label> <input\r\n");
      out.write("\t\t\t\t\t\ttype=\"text\" class=\"form-control\" id=\"txt_edate\" name=\"txt_edate\" value=\"");
      out.print(common.nullToString(mapSchargs.get("edate")) );
      out.write("\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-md-2\">\r\n");
      out.write("\t\t\t\t\t<label for=\"txt_name\" class=\"form-label\">호텔명</label> \r\n");
      out.write("\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"txt_name\" name=\"txt_name\" value=\"");
      out.print(common.nullToString(mapSchargs.get("name")) );
      out.write("\">\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"col-md-2\" style=\"margin-top: 46px;\">\r\n");
      out.write("\t\t\t\t\t<button type=\"submit\" class=\"btn btn-primary\">조회</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<!-- 리스트 -->\r\n");
      out.write("\t<div class=\"album py-5 bg-light\" style=\"margin-top: 20px;\">\r\n");
      out.write("\t\t<div class=\"container\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div class=\"row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t");

				if (list != null && list.size() > 0) {
					// 숙박 리스트가 있다면 돌리기
					for (int i = 0; i < list.size(); i++) {
						HotelInfo hotelInfo = list.get(i);
						String hotel_addr = common.txtToShort(hotelInfo.getHotel_addr(), 10);
				
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"col\">\t\t\t\r\n");
      out.write("\t\t\t\t\t<a href=\"hotel_view.hotel?hotel_code=");
      out.print(hotelInfo.getHotel_code() + schargs );
      out.write("\" >\r\n");
      out.write("\t\t\t\t\t<div class=\"card shadow-sm\">\r\n");
      out.write("\t\t\t\t\t\t<img src=\"/jejurisong/common/images/HotelImg/");
      out.print(hotelInfo.getHotel_img1() );
      out.write("\" width=\"100%\" height=\"100%\" />\r\n");
      out.write("\t\t\t\t\t\t<div class=\"card-body\">\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"card-text\">");
      out.print(hotelInfo.getHotel_name() );
      out.write("</p>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"card-text\">");
      out.print(hotelInfo.getHotel_name() );
      out.write("</p>\r\n");
      out.write("\t\t\t\t\t\t\t<p class=\"card-text\">");
      out.print(common.getArea().get(hotelInfo.getHotel_area()) );
      out.write("</p>\r\n");
      out.write("\t\t\t\t\t \t\t<p class=\"card-text\">");
      out.print(String.format("%,d", hotelInfo.getRoom_dis_price()) );
      out.write("원</p>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t");

					}
				}
				
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  <footer class=\"text-muted py-5\">\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t  <p class=\"float-end mb-1\">\r\n");
      out.write("\t\t<a href=\"#\">Back to top</a>\r\n");
      out.write("\t  </p>\r\n");
      out.write("\t  <p class=\"mb-1\">Album example is &copy; Bootstrap, but please download and customize it for yourself!</p>\r\n");
      out.write("\t  <p class=\"mb-0\">New to Bootstrap? <a href=\"/\">Visit the homepage</a> or read our <a href=\"/docs/5.0/getting-started/introduction/\">getting started guide</a>.</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("  </footer>\r\n");
      out.write("  \r\n");
      out.write("\t  <script src=\"");
      out.print(incSrc );
      out.write("bootstrap.bundle.min.js\" ></script>\r\n");
      out.write("  \r\n");
      out.write("\t\t\r\n");
      out.write("\t</body>\r\n");
      out.write("  </html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
