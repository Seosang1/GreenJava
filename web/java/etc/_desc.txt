예외(exception)
 - 에러가 아닌 프로그램 실행중에 나타나는 예외적인 상황으로 컴파일은 되지만 실행시 문제가 생기는 상황
 - 개발자가 미리 알고 처리를 해야 하는 기능
 - 자바에서는 예외적인 상황의 처리를 위해 try-catch문을 사용할 수 있음
 - 문법
try {
	예외가 발생하는지 검사할 실행문(들)
} catch(발생할 예외클래스) {
	발생한 예외에 대한 처리문(들)
} catch(발생할 예외클래스2) {
	발생한 예외에 대한 처리문(들)2
} finally {
	예외 발생과 상관없이 실행되는 영역
}
 - 하나의 try에 여러 개의 catch문을 사용할 수 있음
 - 단, 여러 catch문을 사용할 경우 반드시 상위클래스에 해당하는 예외를 아래쪽에 배치해야 함
	예) Exception클래스는 항상 가장 마지막 catch문에서 사용해야 함
 - finally : try나 catch문 중간에 return으로 메소드를 종료시켜도 실행되는 영역
	예외 발생과 상관없이 반드시 실행되어야 하는 실행문을 입력하는 곳
	예) DB Connection 닫기, ResultSet 닫기 등의 기능을 의미
 - 메소드들 중 선언부에 'throws 예외클래스[, 다른 예외클래스]'를 정의한 메소드들은 사용시 try-catch안에서 호출해야 함


Wrapper 클래스들
 - 기본자료형 데이터를 객체(인스턴스)로 만들어 주는 클래스
 - 종류 : java.lnag.Boolean, Byte, Character, Double, Float, Integer, Long, Short
 - 단순한 객체가 아닌 자료형을 유지한 채로 인스턴스화 시키는 클래스들
 - Boxing : 기본자료형 데이터를 객체화 하는 것
 - Unboxing : 객체가 된 데이터를 다시 기본자료형 데이터로 돌려놓는 것
 - 생성자
Integer(int val) : 지정한 int형 데이터를 Integer형 인스턴스로 생성
Integer(String str) : 지정한 문자열을 Integer형 인스턴스로 생성
	다른 모든 Wrapper클래스의 생성자들도 동일함

 - 주요 메소드
static int parseInt(String s) : 지정한 문자열 s를 int형 기본 자료형 데이터로 리턴
 - 모든 Wrapper클래스에 parse자료형() 의 이름으로 존재함
static Integer valueOf(String s) : 지정한 문자열 s를 Integer형 인스턴스로 리턴
 - 모든 Wrapper클래스에 동일한 이름으로 존재함


BigInteger 클래스
 - long형으로 표현할 수 없는 정수를 표현할 때 사용하는 클래스로 java.math 패키지에 있음
 - 생성자
BigInteger(String val) : 문자열로 숫자를 입력하여 BigInteger 인스턴스를 생성
 - 주요 메소드
리턴타입		메소드명 및 설명
BigInteger	abs() : 절대값을 구하는 메소드
BigInteger	add(BigInteger val) : 두 개의 BigInter 인스턴스를 더한 후 리턴
BigInteger	divide(BigInteger val) : BigInter 인스턴스를 val로 나눈 후 리턴
double		doubleValue() : BigInter 인스턴스를 double형 데이터로 변환 후 리턴
float		floatValue() : BigInter 인스턴스를 float형 데이터로 변환 후 리턴
int			intValue() : BigInter 인스턴스를 int형 데이터로 변환 후 리턴
long		longValue() : BigInter 인스턴스를 long형 데이터로 변환 후 리턴
BigInteger	mod(BigInteger m) : BigInter 인스턴스를 m으로 나눈 후 나머지를 리턴
BigInteger	multiply(BigInteger val) : 두 개의 BigInter 인스턴스를 곱한 후 리턴
BigInteger	subtract(BigInteger val) : BigInter 인스턴스에서 val을 뺀후 리턴


BigDecimal 클래스
 - 정확한 실수연산이 필요할 때 사용하는 클래스로 java.math 패키지에 있음
 - 주요 메소드
리턴타입		메소드명 및 설명
BigDecimal	abs() : 절대값을 구하는 메소드
BigDecimal	add(BigDecimal val) : 두 개의 BigDecimal 인스턴스를 더한 후 리턴
BigDecimal	divide(BigDecimal val) : BigDecimal 인스턴스를 val로 나눈 후 리턴
double		doubleValue() : BigDecimal 인스턴스를 double형 데이터로 변환 후 리턴
float		floatValue() : BigDecimal 인스턴스를 float형 데이터로 변환 후 리턴
int			intValue() : BigDecimal 인스턴스를 int형 데이터로 변환 후 리턴
long		longValue() : BigDecimal 인스턴스를 long형 데이터로 변환 후 리턴
BigDecimal	mod(BigDecimal m) : BigDecimal 인스턴스를 m으로 나눈 후 나머지를 리턴
BigDecimal	multiply(BigDecimal val) : 두 개의 BigDecimal 인스턴스를 곱한 후 리턴
BigDecimal	subtract(BigDecimal val) : BigDecimal 인스턴스에서 val을 뺀후 리턴


Math 클래스
 - java.lang 패키지에 있는 클래스로 수학관련 기능을 제공하는 클래스임
 - 생성자가 따로 없으며 모든 필드와 메소드들이 static으로 지정되어 있어 인스턴스를 생성할 필요가 없음


StringTokenizer 클래스
 - java.util 패키지에 있는 클래스로 문자열을 여러 조각을 자를 때 사용하는 클래스
 - 기능상 String클래스의 split() 메소드와 비슷하나 리턴타입이 String[] 이 아닌 StringTokenizer의 인스턴스임
 - 구분자를 여러 종류로 사용할 수 있으나 한 글자로만 구분자를 만들어야 함
	구분자로 여러 글자를 입력하면 합쳐서 구분자로 사용하는 것이 아닌 각각 한 글자씩 구분자로 사용함

 - 생성자
StringTokenizer(String str) : 문자열을 띄어쓰기를 기준으로 나눔
StringTokenizer(String str, String delim) : 문자열을 delim을 기준으로 나눔
StringTokenizer(String str, String delim, boolean returnDelims)
 : 문자열을 delim을 기준으로 나누며 returnDelims가 true이면 delim도 포함하고 false이면 미포함(기본값 : false)

 - 주요 메소드
리턴타입	메소드명 및 설명
int		countTokens() : 나눈 토큰의 개수를 리턴
boolean	hasMoreElements() : 남은 토큰의 존재 여부를 리턴(루프문의 조건으로 사용)
boolean	hasMoreTokens() : hasMoreElements()와 동일한 기능
Object	nextElement() : 다음 토큰을 Object로 받아옴
String	nextToken() : 다음 토큰을 String으로 받아옴


Random 클래스
 - java.util 패키지에 있는 클래스로 0이상 1미만의 난수를 발생시키는 클래스
 - 실수로 값이 나오기 때문에 될 수 있으면 정수로 바꾸어 작업해야 함
 - 주로 복권 등의 예측불가 기능에서 많이 사용됨

 - 주요 메소드
리턴타입	메소드명 및 설명
boolean	nextBoolean() : boolean 형 난수 리턴
double	nextDouble() : double 형 난수 리턴
float	nextFloat() : float 형 난수 리턴
int		nextInt() : int 형 난수 리턴
long	nextLong() : long 형 난수 리턴




