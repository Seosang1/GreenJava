상속(inheritance)
 - 다른 클래스로 부터 상속받아 그 클래스의 기능(메소드)과 속성(변수, 상수)을 사용하는 것

 - 자바의 모든 클래스(Object 제외)는 상속받고 있음
	모든 클래스를 기본적으로 Object클래스를 상속받고 있음

 - 자바에서는 단일 상속만을 지원하기 때문에 하나의 클래스만 상속받을 수 있음(c언어는 다중 상속을 지원함)

 - 소스의 재활용적인 측면으로만 상속을 사용하면 안됨

 - 자바에서의 상속은 상위클래스와 동일한 성격을 지닌 클래스로 생성하기 위해 사용됨

 - 상속을 받은 클래스를 '하위클래스' 또는 '서브(sub)클래스', 상속을 해준 클래스를 '상위클래스' 또는 '슈퍼(super)클래스'라고 함

 - 하위클래스의 생성자에서는 반드시 상위클래스의 생성자를 호출해야 하며, 첫줄에 적어야 함
	생략하면 JVM이 자동으로 인수없는 기본 생성자를 호출함
	super 키워드를 이용하여 상위클래스의 생성자를 호출(매개변수가 있으면 그 값도 넣어줘야 함)
	단, 상위클래스에서는 하위클래스로 접근할 수 없음

 - private으로 선언된 멤버도 상속은 되지만 private이므로 직접적인 접근은 불가(protected 메소드를 통해 접근해야 함)

 - 클래스(static)멤버도 상속이 되어 하위클래스에서 자유롭게 접근할 수 있음

 - 상속관계에 있으면 상위클래스형으로 선언한 인스턴스에 하위클래스의 인스턴스가 생성되거나 들어갈 수 있음
	JVM에 의해 내용은 하위클래스이지만 선언이 상위클래스이므로 상위클래스형으로 인식되어 상위클래스의 메소드만 사용할 수 있음
	단, 오버라이딩된 메소드가 있으면 예외적으로 하위클래스의 메소드가 실행됨

 - 문법
class 하위클래스명 extends 상속받을 클래스명 {
	하위클래스 생성자() {
		super();	// 반드시 첫줄에서 상위클래스의 생성자를 호출해야 함
		// 하위클래스에 생성자가 없으며 JVM이 자동으로 상위클래스의 기본 생성자를 호출해 줌
	}
}


상속을 하기 위한 클래스간의 관계
 - 모든 클래스를 상속할 수 있으나 특정 관계가 성립하는 클래스들 끼리 상속을 해야 자바에서의 상속 목적에 맞음
 - is-a 관계
	'하위클래스 is a 상위클래스'의 관계가 성립되는 클래스들을 의미
	즉, 하위클래스가 상위클래스의 일종으로 사용될 경우를 의미
 - has-a 관계
	'하위클래스 has a 상위클래스'의 관계가 성립되는 클래스들을 의미
	즉, 하위클래스가 상위클래스를 소유하고 있는 경우를 의미
	단, 소유하지 않는 경우가 있을 경우 상속은 다시 생각해봐야 함(예외적인 상황이 있을 경우 상속을 받으면 안됨)
	만약 소유하지 않는 경우가 있는데도 상속을 하면 소유하지 않는 인스턴스는 표현이 안됨
	소유하지 않는 경우가 있는 has-a관계는 상속이 아닌 복합방식으로 표현하면 됨


오버라이딩(overriding)
 - 하위클래스에서 상위클래스의 메소드를 재정의하는 것
	오버로딩과 다르게 선언부(리턴타입 메소드명(매개변수))는 완전히 동일함(매개변수도 동일)
 - 오버라이딩시 접근제어지시자는 반드시 원본 보다 넓거나 같은 범위를 사용해야 함
	원본이 public 이면 오버라이딩되는 메소드는 무조건 public으로 해야 함
 - 하위클래스의 인스턴스에서 오버라이딩된 메소드를 호출하면 무조건 하위클래스의 메소드가 실행됨
	상위클래스의 원본 메소드를 실행하려면 하위클래스의 오버라이딩된 메소드 안에서 super 키워드로 호출해야 함
	예) super.원본메소드명();


instanceof 연산자
 - 인스턴스가 지정한 특정 인스턴스로 형변환이 가능한지 여부를 검사하는 연산자
	절대 실제 자료형을 묻는 연산자는 아님
 - 상속관계를 바탕으로 형변환 가능여부를 물음
 예) Aa instanceof Bb -> Aa가 Bb로 형변환이 가능한지 여부

※ 상위클래스로 선언된 인스턴스에는 하위클래의 인스턴스가 저장될 수 있다.
 - 그 인스턴스는 알맹이는 하위클래스이지만 JVM에게는 상위클래스로 인식됨
 - 그래서 실제 사용할 수 있는 멤버는 상위클래스에 있는 것들만 가능

 - 이상황에서 하위클래스의 메소드를 사용하는 방법 두 가지
	1. 해당 하위클래스로 형변환한 후 사용 - Java API에서 제공하거나 변경하면 안되는 상위클래스일 경우
	2. 오버라이딩을 이용하는 방법 - 변경할 수 있으며 변경해도 괜찮은 상위클래스일 경우


Object 클래스
 - java.lang.Object클래스는 모든 자바의 클래스들이 상속받고 있는 최상위 클래스임
 - 즉, 모든 클래스는 Object클래스의 하위클래스로 Object클래스로 선언한 인스턴스에는 모든 종류의 자료가 들어갈 수 있음
	기본 자료형 데이터들도 Wrapper클래스를 이용하면 넣을 수 있음
 - 모든 클래스에서는 Object클래스의 멤버들을 자유롭게 사용할 수 있음
 - 오버라이딩 해놓으면 좋은 toString()메소드 : Java API에서 권장하는 사항
	String toString() : 객체(인스턴스)를 출력할 때 그 객체를 문자열로 변환시켜주는 메소드
	객체를 출력시 자동으로 실행되는 메소드로 객체를 문자열로 변환시키는데 그 값이 별 쓸모가 없으므로 원하는 형태의 문자열로 오버라이딩하여 바꿔주는 것이 편리
	주로 정보저장용 클래스에서 많이 사용하며, 프로그래밍시 확인(디버깅)용으로 사용됨


final 키워드
 - final 변수 : 해당 변수를 상수로 생성 - 값 변경 불가
	선언 : final 자료형 변수명;
 - final 메소드 : 오버라이딩 불가
	선언 : 접근제어지시자 final 리턴타입 메소드명()
 - final 클래스 : 상속 불가 - 상속받지 말고 인스턴스 생성해서 사용하라는 의미(주로 Java에서 제공하는 클래스들 중에 있음)
	선언 : 접근제어지시자 final class 클래스명 {}


