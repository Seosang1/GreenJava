SQL(Structed Query Language)
 - SQL은 DML, DDL, DCL로 분류됨
 - DML(Data Manipulation Language)은 데이터 조작어로 데이터를 조작(입력, 수정, 삭제, 선택)하는 데 사용되는 언어
	DML이 사용되는 대상은 테이블의 레코드들이며, 반드시 테이블이 존재해야 함
 - DDL(Data Definition Language)은 데이터 정의 언어로 DB, table, view, index 등의 객체를 생성, 수정, 삭제 시 사용
 - DCL(Data Control Language)은 데이터 제어 언어로 사용자에게 권한을 부여하거나 빼앗을 때 사용
 - MySQL에서는 쿼리 입력 및 실행시 반드시 세미콜론으로 하나의 명령을 끝내야 함

테이블 생성
create table 테이블명 (
	컬럼명1 자료형1 [제약조건(들)], 
	컬럼명2 자료형2 [제약조건(들)], 
	...
	컬럼명n 자료형n [제약조건(들)], 
	[외래키 제약조건(들)]
);
 - 테이블 생성시 사용할 제약조건
	primary key 제약조건
	 - 특정 컬럼을 기본키로 지정하는 제약조건
	 - 사용법 : 컬럼명 자료형 primary key
	 - 단, 여러 컬럼을 묶어서 기본키로 지정할 경우에는 컬럼 정의 밑에서
		constraint 기본키명 primary key (기본키로 묶을 컬럼명들)
	 - 기본키명 : DB에서 유일한 값이어야 함.	예) pk_테이블명_컬럼명

	foreign key 제약조건
	 - 두 테이블 사이의 관계를 선언함으로써 데이터의 무결성을 보장해 주는 역할을 하는 제약조건
	 - 사용법 : 테이블 생성문 가장 아래에 입력
		constraint 외래키명 foreign key (외래키로 지정할 컬럼명) references 참조테이블명(참조컬럼명)
		[ on update cascade ] [ on delete [cascade | set null]]
	 - 참조컬럼 : 외래키가 참조할 타 테이블의 컬럼으로 반드시 기본키이거나 unique 제약조건을 가진 컬럼이어야 함
	 - 외래키명 : DB에서 유일한 값이어야 함.	예) fk_테이블명_컬럼명
	 - 외래키로 지정할 컬럼과 참조할 컬럼은 자료형 뿐만 아니라 제약조건(unsigned 등)도 동일해야 함
	 - on update cascade : 참조 컬럼의 데이터가 변경되면 외래키로 지정된 컬럼의 데이터도 같이 변경되게 함
	 - on delete cascade : 참조 컬럼의 데이터가 삭제되면 외래키로 지정된 컬럼의 데이터도 같이 삭제되게 함(레코드 삭제)
	 - on delete set null : 참조 컬럼의 데이터가 삭제되면 외래키로 지정된 컬럼의 데이터를 null로 변경
		단, set null을 사용하려면 외래키로 지정된 컬럼이 not null이면 안됨
	 - 전반적으로 외래키에서 on update나 on delete 조건을 넣지 않는 경우가 많음

	unique 제약조건
	 - 특정 컬럼에 중복불가의 제약조건을 걸어줌. 단, null값을 허용됨(비워두는 것을 허용)

	default 제약조건
	 - 특정 컬럼에 데이터를 입력하지 않았을 경우 자동으로 들어갈 기본값을 지정하는 제약조건
	 - 사용법 : 컬럼명 자료형 default 기본값
	 - 기본값 : 숫자나 문자열 등의 특정 값도 가능하지만 now() 같은 함수도 사용가능

	null 제약조건
	 - 특정 컬럼을 비워둘 수 있는 여부를 지정하는 제약조건
	 - 사용법
		컬럼명 자료형 null -- 현 컬럼을 비워둘 수 있음(기본값)
		컬럼명 자료형 not null -- 현 컬럼을 비워둘 수 없음

	auto_increment 제약조건
	 - 자료형이 정수일 경우에만 사용할 수 있는 제약조건으로 값을 1부터 시작하여 1씩 증가 시킴
	 - 유일하게 변경을 할 수 없는 제약조건임
	 - 중간에 삭제되어 숫자가 비더라도 채워지지 않고 계속 증가함
	 - primary key 로도 많이 사용됨
	 - 사용법 : 컬럼명 자료형 auto_increment
	 - last_insert_id() : 현재 connection에서 입력된 마지막 id값(자동증가)을 추출하는 함수

	unsigned 제약조건
	 - 숫자 자료형일 경우 사용할 수 있는 제약조건으로 음수표현을 없애고 양수표현을 두 배로 늘리는 제약조건
	 - 사용법 : 컬럼명 자료형 unsigned


테이블 수정
alter table 테이블명 [ ... ];
 - 컬럼 추가 
	alter table 테이블명 add 컬럼명 자료형 제약조건 [ first | after 기존컬럼명 ];
 - 컬럼명 및 자료형 변경
	alter table 테이블명 change column 기존컬럼명 새컬럼명 자료형;
	 - 변경이 일어나지 않는 것이 제일 좋으면 변경시 기존의 데이터를 감안하여 신중히 작업해야 함
 - 컬럼의 제약조건 삭제
	alter table 테이블명 drop [ primary key | foreign key 외래키명 ];


테이블 삭제
drop table 테이블명;
 - 테이블 자체를 삭제하므로 그 안에 있는 데이터들도 삭제됨


임시 테이블(temporary table) 생성
 - 임시 테이블은 잠시 동안만 작업하고 사라질 테이블을 의미하며, 뷰와는 상관없음
 - 삭제되는 시점
	직접 drop table로 삭제할 때
	workbench가 종료될 때
	MySQL 서비스가 종료되거나 재시작할 경우
 - 문법
create temporary table 임시테이블명 (컬럼들 정의);
	일반 테이블과 동일한 문법을 사용하며 'temporary'만 붙여주면 됨


기본쿼리
 - 사이트내에서 사용할 쿼리들로 입력(insert), 수정(update), 삭제(delete), 검색(select) 등을 의미함

1. 데이터 입력 : insert문
1) 문법1 : 기본적인 데이터 입력
insert into 테이블 (컬럼명1, 컬럼명2, ... , 컬럼명n) values (값1, 값2, ... , 값n);
 - 모든 컬럼에 값을 넣는 경우 컬럼명을 생략할 수 있음(단, 값은 테이블에 등록된 컬럼의 순서대로 입력해야 함)
 - 입력한 컬럼의 개수와 순서에 맞춰 값을 입력해야 함

2) 문법2 : 하나의 쿼리로 많은 양의 데이터를 입력
insert into 테이블 (컬럼명1, 컬럼명2, ... , 컬럼명n) select문;
 - select문으로 지정한 컬럼들에 넣을 값들을 추출함
 - 컬럼명은 달라도 자료형은 같아야 가능

3) 문법3 : 테이블을 생성할 때 데이터를 입력
create table 테이블명 (select문);
 - select문으로 추출한 값들을 새롭게 생성되는 테이블에 입력
 - 컬럼에 대한 정의는 select문으로 추출한 컬럼들과 동일하게 지전됨


2. 데이터 수정 : update문
 - 문법
update 테이블명 set 컬럼명1 = 값1[, 컬럼명2 = 값2, ... , 컬럼명n = 값n] [where 조건절];
 - where 절은 수정하는 조건을 입력하는 곳으로 생략가능하나 실제로는 거의 생략되지 않음
 - 수정하는 컬럼의 순서는 테이블의 컬럼 순서와 무관
 - where 절의 경우 철저한 검사가 필요함 (select문을 이용하여 검사하면 됨)
 - 수정시 다른 컬럼의 값을 이용해도 됨
	예) price = price * 0.9
 - MySQL Workbench에서는 기본적으로 수정시 where 에 키에 관련된 컬럼으로만 조건을 입력하게 함
	일반 컬럼으로만 조건을 완성할 경우 오류 발생
	오류 메시지 : You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column.  To disable safe mode, toggle the option in Preferences -> SQL Editor and reconnect.
	 - 키에 관련된 컬럼으로만 조건을 만들라는 이유는 조건으로 수정되는 레코드의 개수를 적게 하기 위해서임
	 - 단, 개발할 때 safe mode로 인해 수정이 자유롭지 못하면 작업에 방해가 되므로 safe mode를 풀어야 함


3. 데이터 삭제 : delete문
 - 문법
delete from 테이블명 [where 조건절];
 - 테이블에서 데이터를 삭제하는 명령으로 테이블 자체를 삭제하는 명령은 아님
 - update와 마찬가지로 where절을 생략할 수 있으나 실제로는 거의 생략하지 않음
 - where 절의 경우 철저한 검사가 필요함 (select문을 이용하여 검사하면 됨)
 - 한 번 삭제하면 되돌리지 못하므로 신중하게 작업해야 함


4. 데이터 검색 : select문
 - 문법 (순서 필수)
select [distinct] 컬럼명(들) 또는 *		-- 검색할 컬럼명(들) 또는 전체 컬럼(*)
from 테이블명(들)						-- 검색할 데이터들이 들어있는 테이블(들)
[
[left | right] join			-- 여러 테이블에서 데이터를 검색할 경우 테이블들을 연결하는 기능
where 조건(들)				-- 검색조건(들)로 여러 개일 경우 논리 연산자를 이용하여 작업
group by 컬럼명(들)			-- 지정한 컬럼을 기준으로 그룹화(동일한 값을 묶음)하여 데이터를 추출(지정한 순서대로 그룹화함)
 -- group by에서 여러 개의 컬럼을 지정하면 왼쪽 컬럼을 우선적으로 하여 그룹화 되며 같은 값에서 그 다음 컬럼이 그룹화됨
having 조건(들)				-- group by 절에서 지정한 컬럼들에 대한 조건(주로 집계함수 사용)
order by 컬럼명 [asc | desc], ... -- 정렬기준으로 오름차순(asc 생략가능), 내림차순(desc)으로 정렬하며 여러 컬럼을 지정함
 -- order by에서 여러 개의 컬럼을 지정하면 왼쪽 컬럼을 우선적으로 하여 정렬되며 같은 값에서 그 다음 컬럼이 정렬됨
limit [시작인덱스, ] 레코드개수	-- MySQL 전용 명령으로 검색할 레코드의 위치 및 개수를 지정하여 필요한 만큼만 추출
]
 - 기본 쿼리들 중 가장 많이 사용되고, 어려운 쿼리임(위험도는 가장 낮음)
 - 컬럼명이 너무 길거나, 동일하거나, 계산식일 경우 컬럼명을 임의로 변경하영 데이터를 추출할 수도 있음
	진짜 컬럼명이 변경되는 것은 아니며 현 select쿼리의 결과에서만 변경됨
	임의로 변경하는 것을 alias라 하며 '컬럼명 as 별칭'의 방법으로 이름을 지정함('as'는 생략가능)
 - distinct는 추출한 컬럼의 데이터가 중복되는 값이 많을 경우 중복되는 값을 하나씩만 추출하는 기능
 - * 는 모든 컬럼을 의미하는 와일드 카드로 사용을 권장하지는 않음


5. 조인(Join)
 - 두 개 이상의 테이블을 서로 묶어서 하나의 결과 집합으로 만들어 내는 기능
 - 조인을 사용하면 속도가 느려지지만 조인을 사용하지 않고 처리하기 위해서는 더 느려지므로 조인기능을 사용해야 함

1) Inner Join
 - 내부 조인이라고도 하며 가장 많이 사용되는 조인으로 일반적으로 조인이라 하면 Inner join을 의미함
 - 문법
select 가져올 컬럼들 from 테이블1 inner join 테이블2 on 테이블1과 테이블2의 결합 조건
또는
select 가져올 컬럼들 from 테이블1, 테이블2 where 테이블1과 테이블2의 결합 조건

 - 가져올 컬럼의 이름이 두 테이블 모두에 속할 경우 테이블명.컬럼명으로 구분함
	단, 테이블명을 입력하는 것이 번거로우므로 테이블에 alias를 붙여 사용하기도 함

 - 조인의 결합 조건은 관계가 없는 테이블 끼리도 가능하나 일반적으로 관계를 맺은 PK와 FK를 비교하는 것으로 조건을 충족시킴

 - 세 개이상의 테이블 조인
select 가져올 컬럼들 from 테이블1 inner join 테이블2 on 테이블1과 테이블2의 결합 조건 inner join 테이블3 on 테이블3와 테이블1 또는 테이블2의 결합 조건
또는
select 가져올 컬럼들 from 테이블1, 테이블2, 테이블3 where 테이블1과 테이블2의 결합 조건 and 테이블3와 테이블1 또는 테이블2의 결합 조건

2) Outer Join
 - 조인의 조건에 맞지 않는 레코드들도 포함시키는 조인방법
 - 문법
select 가져올 컬럼들 from 테이블1 <left | right> [outer] join 테이블2 on 테이블1과 테이블2의 결합 조건

 - left를 사용하면 왼쪽의 테이블1이 가진 레코드는 모두 출력하고, 테이블2의 레코드는 결합 조건에 맞는 것만 출력
 - right를 사용하면 오른쪽의 테이블2가 가진 레코드는 모두 출력하고, 테이블1의 레코드는 결합 조건에 맞는 것만 출력

3) Cross Join
 - 조건없이 두 테이블의 모든 데이터를 출력하는 조인방법
 - 문법
select 가져올 컬럼들 from 테이블1 cross join 테이블2
또는
select 가져올 컬럼들 from 테이블1, 테이블2

 - 조건이 없으므로 on이나 where 키워드는 사용 안함


6. Union
 - 조인은 아니고, 두 쿼리의 결과를 합쳐서 하나의 결과물로 출력하는 기능
 - 문법
select 쿼리1
union
select 쿼리2

 - union을 사용하려면 두 select쿼리에서 추출하려는 컬럼의 개수가 동일해야 함(데이터타입은 달라도 상관없음)
 - 결과의 컬럼명은 윗쪽 테이블의 컬럼명으로 나옴
 - 자바에서 두 개의 ResultSet이 필요한 것을 하나의 ResultSet으로 처리할 수 있게 됨


7. 서브쿼리
 - 다른 쿼리의 일부분으로 사용되는 쿼리
 - 괄호로 묶어서 사용하며 항상 select문을 사용해야 함
 - select문에서는 어디서든 사용할 수 있음
 - insert문에서는 values 절에서 사용가능
 - update문에서는 set 절에서 사용가능
 - 속도가 아주 느린편에 속하는 쿼리로 특별한 경우가 아니면 사용을 지양해야 함



