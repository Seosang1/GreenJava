스토어드 프로시저(Stored Procedure)
 - 데이터 베이스의 개체들 중 하나로 저장 프로시저라고도 함
 - DBMS에서 제공하는 프로그래밍 기능으로 일반적인 프로그래밍과는 다르지만 DBMS내에서 사용됨
 - 스토어드 프로시저는 쿼리문들의 집합으로 어떠한 동작을 일괄처리하기 위한 용도로 사용됨
 - 또는 자주 사용되는 일반적인 쿼리를 사용시 마다 입력하여 사용하기 보다는 이것을 모듈화 시켜서 필요할 때마다 호출만 하면 되도록 사용함
	자바에서의 메소드와 같은 역할을 한다고 생각하면 됨

장점
 - 자바에서는 호출만 하고, 실제 실행은 DB에서 하므로 웹서버가 아닌 DB서버에서 주로 작업을 하므로 웹서버의 부담을 덜어줌
 - 쿼리의 제작 등을 DB에서 하므로 보안상 뛰어남

단점
 - 사이트 제작 초창기에 스토어드 프로시저를 먼저 생성해야 하기 때문에 초반 작업이 늘어남

스토어드 프로시저 생성법
delimiter $$	-- 명령의 종류 표시를 ';'이 아닌 '$$'로 변경한다는 의미
create procedure 프로시저명([in 또는 out 매개변수])
-- 지정한 프로시저명으로 스토어드 프로시저를 생성하겠다는 의미
-- 매개변수를 없을 수도 있으며, 있는 경우 값을 받아오는 매개변수(in)와 값을 내보내는 매개변수(out)로 나뉨
begin	-- 프로시저의 시작
	프로시저의 내용으로 쿼리와 프로그래밍이 들어갈 부분(여러 개의 쿼리를 사용해도 됨)
end $$	-- 프로시저의 종료
delimiter ;		-- 명령의 종료 표시를 다시 ';'으로 되돌린다는 의미

 - 실행법 : call 스토어드프로시저명([인수(들)]);
 - 삭제법 : drop procedure 스토어드프로시저명;



스토어드 함수(Stored Function)
 - 사용자가 직접 만들어서 사용하는 함수로 그냥 함수나 사용자 정의 함수라고도 함
 - 스토어드 프로시저에 비해 사용빈도가 낮은 편으로 사용여부는 상황에 맞게 판단하면 됨
 - 무조건 리턴값이 존재해야 함
 - 매개변수는 in과 out의 구분없이 무조건 in에 해당함
 - 스토어드 프로시저에서는 select문을 사용할 수 있지만 함수에서는 사용불가
	이유는 select문의 실행결과인 집합을 리턴할 수 없으므로 함수에서는 사용불가
	단, select .. into 문은 집합을 리턴하는 것이 아니므로 사용가능
 - 스토어드 프로시저는 여러 쿼리문의 실행이나 계산등의 작업에 사용되지만, 함수는 어떤 계산을 통해 하나의 값을 리턴하는 용도로만 사용됨
 - 스토어드 프로시저나 쿼리문에서도 스토어드 함수를 호출할 수 있음(where절에 포함)

 - 생성법
	함수 생성을 위해서 권한을 먼저 부여해야 함
set global log_bin_trust_function_creators = 1;

delimiter $$
create function 함수명([매개변수(들)]) returns 리턴데이터타입
begin
	함수의 내용들;
	return 리턴값;
end $$
delimiter ;

 - 실행법 : select 함수명([매개변수(들)]);
 - 삭제법 : drop function 함수명;



DB에서의 프로그래밍 제어문
 - 일반 쿼리에서는 사용못하고 프로시저나 함수의 안에서 사용됨

0. 변수 사용
 - 프로시저 내에서는 변수를 따로 선언하고, 값을 넣어 사용할 수도 있음
 - 선언법 : declare 변수명 자료형;
 - 값설정1 : set 변수명 = 값;
 - 값설정2 : select 컬럼명 into 변수명 from 테이블명 [where 조건];
	테이블에 있는 특정 컬럼의 값을 변수에 저장함

1. 분기문
 - 조건에 따라 특정 영역의 실행문(들)만을 실행시키는 제어문

1-1. if문
 - 가장 많이 사용되는 분기문으로 조건의 참, 거짓에 따라 실행할 실행문이 달라짐
 - 실행문이 두 문장이상일 경우에는 begin과 end로 묶어서 처리해야 함
 - 문법
if 조건 then
	begin
		실행문;
	end
[
elseif 조건2 then
	begin
		실행문2;
	end
...
else
	begin
		실행문;
	end
]
end if;

1-2. case 문
 - 자바의 switch문과 비슷하나 조건을 입력할 수 있는 것이 특징
 - 문법
case
	when 조건1 then
		실행문1;
	when 조건2 then
		실행문2;
	...
	when 조건n then
		실행문n;
	else
		모든 조건이 거짓일 때 실행할 실행문;
end case;

2. 반복문
 - 조건을 주어 조건이 참인 동안 지정한 실행문(들)을 반복하여 실행시키는 제어문
 - 레이블은 생략가능하나 iterate와 leave명령을 사용하려면 필수임
 - iterate 명령어
	자바의 continue와 비슷한 기능을 함
	레이블을 지정한 후 iterate를 실행하면 지정된 레이블로 이동함
 - leave 명령어
	자바의 레이블을 이용한 break와 비슷한 기능을 함
	레이블을 지정한 후 leave를 실행하면 지정된 레이블의 루프문을 빠져나감

2-1. while 문
 - 자바의 while문과 동일하게 동작
 - 문법
[레이블명:]while (조건) do
	실행문;
end while;

2-2. loop 문
 - 조건을 loop문 안에서 if를 이용하여 입력하고, leave 명령어를 이용해 반복문을 빠져 나옴
 - 문법
레이블:loop
	if 루프를 끝낼 조건 then
		leave 레이블;
	end if;
	실행문;
end loop;

2-3. repeat-until 문
 - 문법
repeat
	실행문;
	until 루프를 끝낼 조건 -- 조건이 참이면 루프 종료(; 없음)
end repeat;
 - until절은 반드시 repeat문의 가장 아래에 위치시켜야 함



트리거(trigger)
 - 트리거를 지정한 테이블에서 무슨 일이 발생하면 자동으로 지정해 놓은 작업이 실행되게 하는 기능
 - 테이블에 입력, 수정, 삭제 중 하나가 발생시 동작하게 됨
 - 트리거는 특정 테이블에 부착(attach)되는 프로그램 코드라고 생각되면 됨
 - 다른 DBMS에서는 뷰에도 트리거를 부착할 수 있지만 MySQL은 불가
 - 프로시저와 비슷한 방식으로 생성할 수 있으나 프로시저와는 다르게 독립적으로 실행시킬 수는 없고 오직 해당 테이블에 이벤트가 발생할 경우에만 실행됨
 - 매개변수를 사용할 수 없음
 - DBMS의 기능들 중 메모리를 많이 차지하는 기능으로 꼭 필요한 부분이 아니면 프로시저 등으로 돌려서 작업하는 것이 좋다.
 - 종류 : after와 before로 특정 작업 전후로 트리거에서 지정한 작업이 동작하게 됨

 - 생성
delimiter $$
create trigger 트리거명 [after | before] [insert | update | delete] on 테이블명 for each row
begin
	트리거 내용;
end $$
delimiter ;

 - 삭제 : drop trigger 트리거명;
 - 트리거의 내용에는 해당 테이블에 대한 쿼리는 사용할 수 없음





