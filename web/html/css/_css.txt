CSS(Cascading Style Sheets : 스타일 시트)
 - HTML만으로는 웹문서를 다양하게 꾸미거나 변경하는 데 제약이 있어 이를 보완하려 만들어진 것
 - 웹표준 이전에는 주로 문서를 꾸며주는 역할로만 사용되어 그 쓰임새가 한정적이었음
 - 웹표준 이후에는 꾸미는 역할 말고도 레이아웃 지정 및 조절 기능과 꾸미는 모든 기능에 대해 스타일 시트를 사용하기 시작함(기존에 태그로 했던 꾸밈 작업도 css를 사용함)
 - 스타일 시트를 사용하면 사이트제작시나 제작후 유지보수시 간편하게 작업이 가능함
 - 스타일 시트는 크게 '선택자'와 '선언부'로 나뉨
	선택자는 스타일을 적용할 대상을 지정하는 것을 의미(특정 태그나 범위등을 의미)
	선언부는 선택자로 지정된 범위에 적용할 스타일 속성과 값을 의미
	문법) 선택자 { 속성명1:값1; 속성명2:값2; ...; 속성명n:값n; }
	 - 속성이 두 개이상일 경우 반드시 세미콜론(;)으로 구분해야 하며, 속성이 하나이거나 마지막 속성일 경우 세미콜론을 생략해도 됨
	 - 속성의 이름은 길어도 풀네임으로 짓는 경우가 많으며 두 단어 이상일 경우 하이픈(-)으로 연결되어 이름을 사용하게 됨
	 예) bgcolor (html속성명) - background-color (css속성명)
 - 주석 : '/*' 부터 '*/'까지를 주석으로 취급함


CSS 적용방식
1. 인라인(inline) 방식
 - html태그에 직접 스타일 시트를 style속성을 이용하여 지정하는 방식
 - 가장 우선순위가 높은 방식이며, 태그에 직접 사용되었기 때문에 알아보기가 쉽다.
 - 단, 스타일 시트 변경시 사용했던 태그로 다시 와서 작업해야 하기 때문에 번거롭다.
	동일한 작업을 한 여러 태그에도 똑같이 다시 작업해야 함
	그러므로 한 번만 사용하거나 급하게 작업해야 할 경우가 아니면 사용을 자제해야 함
 - 예) <태그명 style="스타일 시트 내용">...</태그명>

2. 내부(internal) 파일 방식
 - html문서 내부에서 스타일 시트를 입력하는 방식으로 <style>태그를 사용
 - 해당 문서 전체에 영향을 미칠 수 있어 인라인 방식보다 넓은 적용범위를 가짐
 - 일반적으로 <head>태그 내에서 입력함
 - 예) <style> 스타일 시트 내용 </style>

3. 외부(external 또는 linking) 파일 방식
 - 스타일 시트 파일(파일명.css)을 따로 만들어서 그 파일을 해당 문서에 연결하여 사용하는 방식
 - 첫 실행시 가장 느린 방식임(두번째 부터는 이미 받은 파일을 실행하므로 빨라짐)
 - 유지 보수시 간편하게 작업할 수 있으나, css파일에 대해 정확히 알고 있어야 가능
 - 실무에서 가장 많이 사용되는 방식
 - 예) <link type="text/css" rel="stylesheet" href="경로 및 css파일명" />
 - @import 방식도 있음
	<style type="text/css">
		@import url("경로 및 css파일명");
	</style>
	단, 속도가 link태그 이용방식 더 빠르므로 link태그를 이용한 방법을 권장
 - ~.css 파일내부에서 다른 css파일을 불러오려면 @import를 사용하기도 함
	예) @import url("불러오려는 파일의 경로 및 css파일명");


CSS 선택자(selector)
 - 스타일을 적용할 대상이나 범위를 지정하는 명령어
 - 선택자가 겹칠 경우(예 : type선택자와 class선택자 등)에는 작은 범위의 선택자에서 지정한 스타일이 우선순위가 높아 적용됨

1. type 선택자
 - html 태그(요소, element)명을 선택자로 사용하는 것을 'type선택자' 또는 '요소, 태그 선택자'라고 함
 - 문법 : 태그명 { 속성명:값; ... }
	예) p { color:blue; } -> 모든 p태그 안에 있는 글자의 색을 파란색으로 지정
 - type선택자는 지정한 태그에 대해 모두 스타일을 적용하므로 생각보다 적용범위가 넓음
	일반적으로 type선택자는 사용빈도가 높지 않고, 초반 설정용으로 주로 사용됨

2. 전체 선택자
 - 선택자에 '*'를 사용하면 모든 요소에 대해 스타일이 적용되며, '유니버셜 선택자'라고도 함
 - 문법 : * { 속성명:값; ... }
	예) * { color:blue; } -> 모든 태그 안에 있는 글자의 색을 파란색으로 지정
	일반적으로 전체 선택자는 거의 사용되지 않고, 초반 설정용으로 가끔 사용됨

3. class 선택자
 - 요소에 class속성을 지정한 경우 해당 class명을 선택자로 사용하는 것
 - class는 요소의 종류에 상관없이 같은 이름으로 여럿을 지정할 수 있으므로 특정 성격을 지닌 그룹으로 스타일을 지정할 수 있음
	한 페이지에서 같은 이름의 class를 여러 개 지정할 수 있음
	한 요소에 여러 개의 class명을 띄어쓰기로 구분하여 지정할 수도 있음
 - 문법 : .class명 { 속성명:값; ... } -> 점(.)으로 class선택자라는 것을 표시함
	예) .note { color:black; } -> note라는 class속성을 가진 요소들의 글자색은 검정
 - 다른 요소여도 class명이 같으면 class명을 통해 그룹화가 가능하기 때문에 자주 사용됨

4. id 선택자
 - 요소에 id속성을 지정한 경우 해당 id명을 선택자로 사용하는 것
 - class와 비슷하나 class와 다르게 id는 한 페이지에서 유일한 이름을 가져야 함 : 중복불가
	단, html 특성상 동일한 id명이 있어도 오류가 발생하지는 않음
	그러므로 개발자가 알아서 id명을 중복되지 않도록 주의해야 함
 - 문법 : #id명 { 속성명:값; ... } -> 샾(#)으로 id선택자라는 것을 표시함
	예) #note { color:black; } -> note라는 id속성을 가진 요소의 글자색은 검정

5. 속성 선택자
 - 요소에서 특정 속성의 갓을 기준으로 선택 범위를 지정하는 방식
 - 문법
	요소명[속성명] : 특정 요소에서 지정한 속성을 사용한 경우
	예) a[target] : a태그들 중 target속성을 사용한 a태그들에만 스타일을 적용
	요소명[속성명="값"] : 특정 요소에서 지정한 속성의 값에 지정한 값을 사용한 경우
	예) a[target="_blank"] : a태그들 중 target속성의 값으로 "_blank'를 사용한 a태그들에만 스타일을 적용
	요소명[속성명^="값"] : 특정 요소에서 지정한 속성의 값이 지정한 값으로 시작하는 경우
	예) a[href^="http"] : a태그들 중 href속성의 값이 "http"로 시작하는 a태그들
	요소명[속성명*="값"] : 특정 요소에서 지정한 속성의 값이 지정한 값을 포함하는 경우
	예) a[href*="www"] : a태그들 중 href속성의 값에 "www"가 들어있는 a태그들

6. 가상요소와 가상클래스
1) first-line, first-letter 가상요소
 - 각각 첫 줄과 첫 문자를 의미하는 가상요소로 해당 범위에 스타일을 적용시킴
 - 문법
	요소명:first-line : 특정 요소의 첫번째 줄에 스타일 적용
	예) p:first-line : p태그에서 첫번째 줄에만 스타일 적용
	요소명:first-letter : 특정 요소의 첫번째 문자에 스타일 적용
	예) p:first-letter : p태그에서 첫번째 문자에만 스타일 적용

2) before, after 가상요소 : IE8 이상에서 부터 지원
 - 특정 내용의 이전(before)이나 이후(after)에 글자를 추가하는 선택자
 - 가상의 내용을 추가하는 선택자이나 문서의 스타일을 위해서만 사용해야 하며 문서의 실제 내용을 추가하는 용도로 사용하면 안됨
 - 문법
	요소명:before { content:"추가할 내용"; } : 지정한 요소의 앞 부분에 content속성의 값을 출력
	예) p:before { content:"test"; } : p태그의 앞에 "test"라는 글자를 출력
	요소명:after { content:"추가할 내용"; } : 지정한 요소의 뒷 부분에 content속성의 값을 출력
	예) p:after { content:"test"; } : p태그의 뒤에 "test"라는 글자를 출력

3) first-child 가상 클래스
 - 특정 요소의 자식 요소들 중 첫번째 요소에만 스타일을 적용
 - 문법 : 요소명:first-child { 속성명:값; }
	예) p:first-child { color:red; } : p태그내의 태그들 중 첫번째 태그의 글자색을 빨간색으로 지정

4) 링크 가상 클래스
 - a 태그에 적용하는 클래스로 상황에 따른 스타일을 각기 다르게 지정할 수 있음
 - 방문하지 않은 링크(link), 방문한 링크(visited), 마우스를 올려놓았을 경우(hover), 링크를 누르고 있는 상황(active), 포커스가 생긴 경우(focus)로 나뉘며 순서를 지켜야 함
 - 문법 : a:가상클래스명 { 속성명:값; }
 - 예)
	a:link { color:black; }		/* 클릭하지 않은 링크 */
	a:visited { color:black; }	/* 클릭한 링크 */
	a:hover { color:red; }		/* 링크에 마우스를 올린 상황 */
	a:active { color:orange; }	/* 링크를 누르고 있는 상황 */
	a:focus { color:black; }	/* 링크에 포커스가 간 상황 */


CSS 선택자 조합
 - 선택자들을 조합하여 사용할 수 있다.

1. 하위 선택자(descendant selector)
 - 상위 요소가 포함하고 있는 모든 하위 요소에 스타일을 적용할 때 사용
 - 문법 : 상위선택자 하위선택자 { 속성값:값; }
	예) div p { color:gray; } /* 모든 div안에 있는 모든 p요소의 글자색 변경 */
 - 자식 선택자 뿐만 아니라 손자뻘의 요소에도 적용됨

2. 자식 선택자(child selector)
 - 부모 요소의 바로 아래에 있는 자식 요소에 스타일을 적용할 때 사용
 - 문법 : 부모선택자 > 자식선택자 { 속성값:값; }
	예) div > p { color:gray; } /* 모든 div안의 모든 p 자식요소의 글자색 변경 */

3. 인접 형제 선택자(adjacent sibling selector)
 - 계층 구조로 접근했을 때 처음 등장하는 요소를 형요소, 뒤에 등장하는 요소를 동생요소라 보고 형 요소 뒤에 오는 동생 요소에 스타일을 적용할 때 사용
 - 문법 : 형선택자 + 동생선택자 { 속성값:값; }
	예) h1 + h2 { color:gray; } /* h1 다음에 오는 h2 요소의 글자색 변경 */

4. 선택자 그룹화
 - 여러 선택자에 동일한 스타일을 적용해야 할 경우 각 선택자 별로 같은 선언문을 반복해서 작성하는 대신 선택자를 그룹화하여 표현할 수 있음
 - 문법 : 선택자1, 선택자2, ..., 선택자n { 속성명:값; }
	예) div p, h1 + h2, .note, #test { color:gray; }
	/* 지정한 선택자들에 해당하는 내용의 글자색 변경 */


CSS에서 사용하는 크기 단위
 - 크기가 변하지 않는 절대 단위와 해상도나 기타 요건에 따라 크기가 변하는 상대 단위로 나뉨
 - 절대 단위 : pt, mm, cm, in (주로 프린터 등에서 출력용으로 사용됨)
 - 상대 단위 : px, ex, em, %
	px : 픽셀로 해상도에 따라 변하며 가장 작은 단위로 가장 많이 사용됨
	ex : 소문자 x의 크기를 기준으로 지정하는 단위
	em : 사이트 기본 글자 크기(body태그의 글자 크기)를 기준으로 배수를 지정
	% : em과 동일하게 기본 글자 크기를 기준으로 백분율로 지정하는 크기
	 - em과 %는 소수점으로 표현가능


박스 모델
 - 블록 박스와 인라인 박스가 화면에 표시되는영역과 다른 박스와의 배치 등에 대한 기능
 - 화면에 표시되는 박스의 크기를 결정할 때 width, height, border, margin, padding 등의 속성을 사용할 수 있다.
 - 속성
	width : 박스의 가로길이
	height : 박스의 세로길이
	border : 박스의 테두리(색상, 두께, 선 종류)
	margin : 박스의 바깥쪽 여백
	 - margin:상하값 auto 를 사용하면 개체가 수평 가운데 정렬이 됨
	 - 개체의 좌우 바깥쪽 여백을 auto로 주면 좌우 여백이 같아지면서 가운데 정렬이 됨
	padding : 박스의 안쪽 여백


박스 모델의 위치 조절
박스의 좌우 위치 조절
1. float 속성
 - 블록요소의 위치를 왼쪽이나 오른쪽으로 이동시키는 기능
	left : 해당 요소가 왼쪽으로 이동되면서 다른 요소가 오른쪽으로 올라옴
	right : 해당 요소가 오른쪽으로 이동되면서 다른 요소가 왼쪽으로 올라옴
	none : float속성을 사용하지 않겠다는 의미
	inherit : 부모요소에서 지정한 float속성을 상속받아 사용한다는 의미

2. clear 속성
 - float속성으로 이동된 요소의 다음에 오는 요소가 이전 요소로 인해 영향을 받는 것을 해제하기 위한 기능
	left : float속성에서 left로 지정한 것을 해제
	right : float속성에서 right로 지정한 것을 해제
	both : float된 방향과 상관없이 모두 해제
	none : clear속성을 사용하지 않겠다는 의미
	inherit : 부모요소에서 지정한 clear속성을 상속받아 사용한다는 의미

박스의 자유로운 위치 조절
 - position속성으로 박스의 위치를 원하는 곳으로 자유롭게 지정할 수 있는 속성
 - 값으로는 static, relative, absolute, fixed 등이 있으며 static이 기본값
 - 박스의 위치는 좌표값을 통해 지정됨
 - 좌표값 : relative, absolute, fixed에서 사용가능
	top : 길이 | 백분율 | auto | inherit
	left : 길이 | 백분율 | auto | inherit
	right : 길이 | 백분율 | auto | inherit
	bottom : 길이 | 백분율 | auto | inherit

1. position:relative
 - 상대 배치 방식으로 요소가 본래 있었던 자신의 위치를 기준으로 지정한 좌표값 만큼 떨어져서 배치되는 방식
 - 다른 요소들의 배치 위치에 영향을 주지 않으면서 배치됨




