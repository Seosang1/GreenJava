자바 스크립트 (Java Script)
 - 웹 페이지에 동적인 움직임을 부여(DHTML : Dynamic HyperText Markup Language)하는 언어로 자바와는 상관없음
	자바 문법을 따와서 작업하므로 자바의 이름을 사용한 것
 - 변수의 자료형을 별도로 선언하지 않고, 객체도 상관없이 바로 사용가능
 - HTML요소의 내용, 속성, 스타일 등을 변경할 수 있음
 - 자바 스크립트는 클라이언트(사용자)의 웹브라우저에서 동작함
 - 스크립트 언어로는 VBScript와 JScript도 있으나 IE전용이기도 하여 사용하지 않음
 - 하나의 명령이 종료되면 반드시 세미콜론(;)을 입력해야 함
 - 여러 개의 명령을 묶기 위해 중괄호({...})를 사용함


자바 스크립트와 HTML문서의 연결
 - 인라인 방식 : HTML요소의 이벤트 속성 등에서 직접 입력
 - 내부파일 방식 : <script>태그를 사용하여 문서 내부에서 입력
 - 외부파일 방식 : 따로 '~.js'파일을 생성하여 문서에서 불러들여 사용


자바 스크립트 변수(Variable)
 - 특정 값 또는 객체를 저장하기 위한 메모리 상의 공간을 의미
 - 변수는 값이 바뀔 가능성이 있는 경우에 사용하게 됨
	값을 사용할 때 값이 변경될 가능성이 조금이라도 있으면 반드시 변수에 넣어서 사용해야 함
	아주 특별한 경우가 아니면 값을 직접 입력하여 사용하는 경우는 없다.
 - 변수 선언시 따로 자료형을 선언하지 않고 'var'라는 키워드로 선언함
	변수를 선언하면 메모리 상에 선언한 이름으로 공간이 생김
 - 변수명 명명 규칙 : 기본적으로 자바와 비슷
	지켜야 할 규칙
	 - 변수명은 영문, 한글, 숫자, 언더바만으로 이름을 지어야 함
	 - 명령어를 이름으로 사용할 수 없음
	암묵적인 규칙
	 - 한글로는 될 수 있으면 짓지말아야 함
	 - 첫글자는 영문 소문자로 하고, 여러 단어의 합성어일 경우 각 단어별 첫글자를 대문자로
	 - 길어도 의미있는 영단어를 사용해야 함(변수명을 보면 값의 종류를 유추할 수 있어야 함)
	 - 변수에 들어가는 값이 boolean이면 변수명의 시작을 is로 함
 - 변수의 적용범위에 따라 지역변수와 전역변수로 나뉨
	지역변수 : 함수내에서 선언한 변수로 함수의 실행이 끝나면 소멸됨
	전역변수 : 하무외부에서 선언한 변수로 페이지 전체에서 사용가능(함수내에서도 사용가능)
	 - 전역변수는 페이지를 이동할 경우에만 소멸됨
 - 선언법 : var 변수명 = 값;


자바 스크립트에서의 자료형(Data Type)
 - 자바 스크립트에서 사용할 수 있는 데이터의 형태를 의미
 - 기본자료형 : number(정수 & 실수), string(문자열), boolean(논리값, 부울형-불리언)
 - 복합자료형 : object(객체), array(배열), function(함수) 등
	하나가 아닌 여러 개의 데이터 묶음이거나 수식들을 포함하는 개념
 - 특수자료형 : undefined(정의되지 않은 상태를 의미), null(널, 객체가 비어있는 경우)


자바 스크립트의 주석
 - 자바와 동일함
 - 한 줄 주석 : // 로 두 번의 슬래시를 입력하면 그 뒤로 한 줄 전체가 주석으로 처리됨
	예) var a = 0;	// 이 부분만 주석임
 - 여러 줄 주석 : /* 부터 */ 까지를 주석으로 처리
	예) /* 이 부분 부터
		여기 까지 주석으로 처리 */


연산자(Operator)
증감 연산자 : ++ --
 - 단항 연산자로 해당 변수의 숫자값을 1씩 증가 또는 감소 시킴
 - 피연산자 : 숫자, 결과값 : 숫자
 - prefix(앞에 붙임)와 postfix(뒤에 붙임)에 따라 값이 1 차이날 수 있음
	prefix : 증감 후 사용  /  postfix : 사용 후 증감
	실제 사용시에는 증감부분과 사용부분을 나누어 입력함
	예) n1 = n2++; -> n1 = n2; n2++;
 - 산술 연산자로 대체할 수 있으나 사용이 간편하여 자주 사용됨

산술 연산자 : + - * / %
 - 숫자로 연산하는 연산자로 결과도 숫자로 나옴
 - 피연산자 : 숫자, 결과값 : 숫자
 - % : 나머지 연산자로 나눗셈 후 몫이 아닌 나머지를 구함
 - + 는 산술연산의 덧셈과 문자열 연결의 두 가지 기능을 가진다.
	문자열 연결은 두 문자열을 서로 붙이는 기능으로 숫자와 문자열을 더해도 문자열 연결이 됨

비교 연산자 : === !== == != > >= < <=
 - 두 값을 비교하는 연산자
 - 피연산자
	=== == !== != : 모든 값, > >= < <= : 숫자, 문자열
 - 결과값 : 무조건 논리값(조건식에서 주로 사용됨)
 - == : 값을 비교하여 같으면 true / === : 값과 자료형을 비교하여 둘 다 같으면 true
 - != : 값을 비교하여 다르면 true / !== : 값과 자료형을 비교하여 하나라도 다르면 true

논리 연산자 : && || !
 - 두 개이상의 조건식을 연산해 주는 연산자
 - 피연산자 : 조건 or 논리값, 결과 : 논리값
 - && : and 연산자로 논리곱이라고도 하며 여러 조건중 하나라도 거짓이면 전체가 거짓이 되는 연산자
 - || : or 연산자로 논리합이라고도 하며 여러 조건중 하나라도 참이면 전체가 참이 되는 연산자
	and연산자가 or연산자 보다 우선순위가 높음
 - ! : not 연산자로 단항 연산자이며 부정 연산자라고도 하며 논리값을 반대가 되게 하는 연산자
	and나 or에 비해서는 자중 사용되지 않으나 잘 사용하면 복잡한 조건을 손쉽게 만들 수 있음

대입 연산자 : = += -= *= /= %=
 - 변수에 특정 값을 대입해주는 연산자
 - += -= *= /= %= : 두 개의 연산자가 합쳐진 형태로 복합 연산자라고도 함
	값을 대입하기 전에 지정한 연산을 처리한 후 대입하게 됨
 - = : 두 개의 값이 같다는 의미가 아닌 '=' 오른쪽에 있는 값을 왼쪽으로 대입시킴

조건 연산자 : (조건식) ? 값1 : 값2;
 - 삼항 연산자라고도 한다.
 - 조건식이 참일 경우 '값1'을 거짓일 경우 '값2'를 가져옴
 - 예) var a = (10 > 2) ? 1 : 2;		// a변수에는 1이 저장됨
 - 간단하게 사용하기 좋으나 if문으로 완벽하게 대체 되므로 사용하지 않는 개발자들도 있다.

연산자들의 우선순위
1	(), []
2	! ++ --
3	* / %
4	+ -
5	< <= > >=
6	== === != !==
7	&&
8	||
9	= += -= *= /= %=


배열 (Array)
 - 여러 개의 변수(비슷한 종류의 데이터를 저장하는 변수를 의미)를 하나의 이름을 묶어서 사용하는 기능
 - 배열 내에 저장된 데이터를 구분하기 위해 인덱스 번호가 존재함(0번 부터 시작)
 - 선언 및 생성법
	리터럴 이용 배열 생성법 : 배열 선언과 동시에 데이터를 바로 저장하는 방법
	 - 문법 : var 배열명 = [값1, 값2, ... , 값n];
	 - 예) var arrNames = ["홍길동", "전우치", "임꺽정"];
	Array 객체 이용 배열 생성법 : 데이터 없이 배열만 선언하고, 후에 데이터를 채워나가는 방법
	 - 문법 : var 배열명 = new Array([배열크기]);
		new : 객체를 생성하는 명령어
		Array : 생성시킬 객체가 배열임을 의미
		배열크기 : 생략가능
	 - 배열의 개수를 먼저 지정하면 그 개수를 넘길 수 없지만 지정하지 않고 작업하면 나중에라도 추가 할 수 있음
		보통 일반 언어에서는 크기를 배열 선언시 지정해야 함(자바 포함)
	리터럴과 Array() 혼합 방식
	 - 문법 : var 배열명 = new Array(값1, 값2, ... , 값n);
 - 자바 스크립트 배열에서는 인덱스 대신 키(key)를 사용하여 값을 할당할 수 있다.
	문법 : 배열명[키] = 값;
 - 배열명.length : 해당 배열의 크기(데이터가 들어갈 공간의 개수)를 구할 수 있음
	length의 값은 배열의 마지막 인덱스 + 1의 값과 같다.


제어문
 - 자바 스크립트나 자바를 포함한 모든 프로그래밍 언어들은 기본적으로 위에서 아래로, 왼쪽에서 오른쪽으로 실행하게 됨
 - 실행 순서를 특정 제어문을 통해 바꾸는 작업을 할 수 있으며, 그런 기능들을 제어문 이라 함
 - 제어문에는 분기문과 반복문의 두 가지가 존재함
 - 제어문은 보통 조건을 주어 조건이 참일 경우에 실행하게 되기 때문에 그 조건에 대해 주석을 달아주는 것이 좋다.
	주석은 단순히 조건식에 대한 설명이 아닌 조건식이 가지는 의미를 주석으로 입력해야 함(특히 if문)
 - 제어문에서 사용하는 조건식은 무조건 식의 결과값이 boolean-논리값 이어야 함
 - 제어문의 실행문은 중괄호 안에 입력하나 실행문이 하나일 경우 중괄호를 생략할 수 있음

분기문
 - 조건을 주어 해당 조건이 참일 경우 특정 작업을 시키고, 거짓이면 다른 작업을 시키는 제어문
 - 하나의 조건으로 두 종류의 일을 각각 시킬 수 있는 제어문으로 if와 switch문이 있음
 - 언어에 따라 조건 연산자도 분기문으로 취급하기도 함(크게 중요하진 않음)

if문
 - 가장 대표적인 분기문으로 모든 제어문들 중 가장 많이 사용됨
 - 다른 분기문인 switch의 기능을 완벽하게 대체할 수 있어 if문만을 사용하는 경우도 많다.
 - 문법
if (조건식) {
	실행문;
}
[
else if (조건식2) {
	실행문2;
} else if (...) {
	...;
} else if (조건식n) {
	실행문n;
} else {
	조건이 거짓일 경우 실행할 실행문;
}
]
 - else조건은 조건이 거짓인 경우를 의미하며 그 범위가 대체로 if의 조건보다 훨씬 큼
	if문에서 else를 사용하면 실행문들 중 하나는 반드시 실행됨
 - else if를 사용해서 많은 조건과 실행문들이 있어도 그 중 하나만 실행됨
	else if가 아무리 많아도 else를 사용하지 않으면 하나도 실행되지 않을 수도 있음
 - if문의 중괄호 안에서 다른 if문을 사용할 수 있음
	내부의 if문은 자동으로 겉의 if문 조건에 참인 상태로 동작하게 됨
if (조건) {
	[실행문;]
	if (조건) {
		실행문;
	}
	[실행문;]
} else {
	[실행문;]
	if (조건) {
		실행문;
	}
	[실행문;]
}

switch문
 - if문과 마찬가지로 조건에 따라 특정 위치로 분기시키는 제어문
 - 단, 조건식이 아닌 값을 이용하여 분기함
 - 문법
switch (비교값) {
	case(값1) :
		비교값이 값1일 경우 처리할 실행문;		break;
[
	case(값2) :
		비교값이 값2일 경우 처리할 실행문;		break;
	...
	case(값n) :
		비교값이 값n일 경우 처리할 실행문;		break;
	default :
		비교값과 동일한 값이 없을 경우 처리할 실행문;
]
}
 - default는 if문의 else와 같은 역할을 함
 - case는 여러 개를 한 줄에 입력할 수 있음
	case(값1) : case(값2) : ...
	여러 개의 case를 한 줄에 입력하면 각 값을 or로 묶여서 동작함
 - switch문은 if문과 다르게 특정 실행문을 실행한 후 아랫쪽에 있는 모든 실행문을 실행시켜 버림
	한 실행문만 실행하려면 break 명령어로 switch문을 빠져나와야 함
	break : switch문 말고 반복문 등에서도 사용하는 명령어로 보통 어느 블록을 빠져나올 때 사용됨

반복(Loop)문
 - 조건이 참일 동안 실행문(들)을 반복해서 실행시키는 제어문
 - 비슷한 작업을 여러 번 진행해야 할 경우 변수의 값을 바꿔가면서 반복시킬 때 사용
 - 주의할 점은 조건이 계속 참이면 실행문을 끝없이 실행하게 됨(무한루프)
	반드시 반복문을 종료시킬 수 있는 조건을 사용해야 함
 - 반복문에는 for, while, do-while의 세가지가 있음
 - 반복문 안에서 다른 반복문을 또 사용할 수 있음(세 가지 반복문을 섞어서 사용해도 무방)
	중첩 반복문이라고 하며 사용시 속도에 대한 주의를 해야 함
 - for와 while은 조건이 거짓일 경우 한 번도 실행되지 않을 수도 있음

for문
 - 루프를 돌릴 횟수가 정해져 있는 경우 많이 사용됨
 - 배열에서 가장 많이 사용됨
 - 문법
for (변수 선언 및 초기화 ; 조건식 ; 증감식) {
	실행문;
}
 - 실행순서 : 변수 선언 및 초기화 -> 조건식 -> 실행문 -> 증감식 -> 조건식 -> 실행문 -> 증감식 -> ...
	변수 선언 및 초기화는 처음 한 번만 실행됨
	첫 바퀴에는 증감식이 실행되지 않음

for-in문
 - for문의 변형으로 배열 전용으로 사용하기 위한 루프문
	자바에는 없으며, 비슷한 걸로 for-each문이 있음
 - 문법
for (변수 선언 in 배열명) {
	실행문;
}
 - 선언한 변수에 지정한 배열의 인덱스 번호가 0번 부터 끝까지 차례로 들어가서 사용할 수 있게 됨
 - 자바 스크립트 전용으로 많이 사용되는 편은 아님

while문
 - 반복할 횟수를 모르는 상황에서 주로 사용되는 루프문
 - for문과 마찬가지로 조건이 참일 동안 실행문(들)을 반복 실행시킴
 - 문법
while (조건식) {
	실행문(들);
}

do-while문
 - while문의 파생형으로 거의 동일한 작업을 함
 - 단, do-while은 조건 검사를 나중에 하므로 무조건 한 번은 실행됨
	조건이 거짓이어도 최소 한 번은 실행함
 - 문법
do {
	실행문(들);
} while (조건식);

break문
 - 각종 제어문에서 실행을 멈추고 빠져나오는 기능
 - 주로 switch와 반복문에서 많이 사용됨
 - 문법 : break;	// 해당 블록(중괄호)을 빠져나옴

continue문
 - 반복문 내에서 현재 실행되고 있는 실행문을 멈추고 다시 반복문의 조건으로 이동하게 하는 기능
 - 반복문 내에서 continue 다음에 오는 명령들을 실행하지 않고 바로 조건으로 이동
 - 문법 : continue;




